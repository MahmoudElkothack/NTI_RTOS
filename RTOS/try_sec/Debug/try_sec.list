
try_sec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080048e4  080048e4  000148e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004994  08004994  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004994  08004994  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004994  08004994  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800499c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a28  20000010  080049ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a38  080049ac  00021a38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166e4  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b9d  00000000  00000000  0003671d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  000392c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c8  00000000  00000000  0003a590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002f45  00000000  00000000  0003b758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ebee  00000000  00000000  0003e69d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092dfc  00000000  00000000  0004d28b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0087  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f04  00000000  00000000  000e0104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080048cc 	.word	0x080048cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080048cc 	.word	0x080048cc

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fa7f 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f81b 	bl	8000194 <SystemClock_Config>
  Uart_handler = xSemaphoreCreateMutex();
 800015e:	2001      	movs	r0, #1
 8000160:	f001 ff6a 	bl	8002038 <xQueueCreateMutex>
 8000164:	4602      	mov	r2, r0
 8000166:	4b09      	ldr	r3, [pc, #36]	; (800018c <main+0x3c>)
 8000168:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f879 	bl	8000260 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016e:	f000 f84d 	bl	800020c <MX_USART1_UART_Init>
  /* creation of defaultTask */
  //defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  	 xTaskCreate(T_1,NULL,100,NULL,1,NULL);
 8000172:	2300      	movs	r3, #0
 8000174:	9301      	str	r3, [sp, #4]
 8000176:	2301      	movs	r3, #1
 8000178:	9300      	str	r3, [sp, #0]
 800017a:	2300      	movs	r3, #0
 800017c:	2264      	movs	r2, #100	; 0x64
 800017e:	2100      	movs	r1, #0
 8000180:	4803      	ldr	r0, [pc, #12]	; (8000190 <main+0x40>)
 8000182:	f002 fcc0 	bl	8002b06 <xTaskCreate>
   //	xTaskCreate(T_4,NULL,100,NULL,4,NULL);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
 // osKernelStart();
   vTaskStartScheduler();
 8000186:	f002 fe85 	bl	8002e94 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800018a:	e7fe      	b.n	800018a <main+0x3a>
 800018c:	2000002c 	.word	0x2000002c
 8000190:	080002a5 	.word	0x080002a5

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	; 0x40
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f004 fb89 	bl	80048ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b6:	2302      	movs	r3, #2
 80001b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001be:	2310      	movs	r3, #16
 80001c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c2:	2300      	movs	r3, #0
 80001c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	4618      	mov	r0, r3
 80001cc:	f000 fcb0 	bl	8000b30 <HAL_RCC_OscConfig>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001d6:	f000 f917 	bl	8000408 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001da:	230f      	movs	r3, #15
 80001dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001de:	2300      	movs	r3, #0
 80001e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 ff1c 	bl	8001030 <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001fe:	f000 f903 	bl	8000408 <Error_Handler>
  }
}
 8000202:	bf00      	nop
 8000204:	3740      	adds	r7, #64	; 0x40
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
	...

0800020c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000210:	4b11      	ldr	r3, [pc, #68]	; (8000258 <MX_USART1_UART_Init+0x4c>)
 8000212:	4a12      	ldr	r2, [pc, #72]	; (800025c <MX_USART1_UART_Init+0x50>)
 8000214:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000216:	4b10      	ldr	r3, [pc, #64]	; (8000258 <MX_USART1_UART_Init+0x4c>)
 8000218:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800021c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800021e:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <MX_USART1_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_USART1_UART_Init+0x4c>)
 8000226:	2200      	movs	r2, #0
 8000228:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <MX_USART1_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000230:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_USART1_UART_Init+0x4c>)
 8000232:	220c      	movs	r2, #12
 8000234:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <MX_USART1_UART_Init+0x4c>)
 8000238:	2200      	movs	r2, #0
 800023a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <MX_USART1_UART_Init+0x4c>)
 800023e:	2200      	movs	r2, #0
 8000240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000242:	4805      	ldr	r0, [pc, #20]	; (8000258 <MX_USART1_UART_Init+0x4c>)
 8000244:	f001 fb0a 	bl	800185c <HAL_UART_Init>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800024e:	f000 f8db 	bl	8000408 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20001940 	.word	0x20001940
 800025c:	40013800 	.word	0x40013800

08000260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <MX_GPIO_Init+0x40>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <MX_GPIO_Init+0x40>)
 800026c:	f043 0304 	orr.w	r3, r3, #4
 8000270:	6193      	str	r3, [r2, #24]
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <MX_GPIO_Init+0x40>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f003 0304 	and.w	r3, r3, #4
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <MX_GPIO_Init+0x40>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <MX_GPIO_Init+0x40>)
 8000284:	f043 0308 	orr.w	r3, r3, #8
 8000288:	6193      	str	r3, [r2, #24]
 800028a:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <MX_GPIO_Init+0x40>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	f003 0308 	and.w	r3, r3, #8
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	683b      	ldr	r3, [r7, #0]

}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	40021000 	.word	0x40021000

080002a4 <T_1>:

void T_1(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af02      	add	r7, sp, #8

	HAL_UART_Transmit(&huart1, (uint8_t*)"T_1 Started \r\n", strlen("T_1 Started \r\n"), 10*2);//(UART_0,"T_2 Started \r\n");
 80002aa:	2314      	movs	r3, #20
 80002ac:	220e      	movs	r2, #14
 80002ae:	4922      	ldr	r1, [pc, #136]	; (8000338 <T_1+0x94>)
 80002b0:	4822      	ldr	r0, [pc, #136]	; (800033c <T_1+0x98>)
 80002b2:	f001 fb20 	bl	80018f6 <HAL_UART_Transmit>
     cur_pri = uxTaskPriorityGet(NULL);
 80002b6:	2000      	movs	r0, #0
 80002b8:	f002 fdd2 	bl	8002e60 <uxTaskPriorityGet>
 80002bc:	4602      	mov	r2, r0
 80002be:	4b20      	ldr	r3, [pc, #128]	; (8000340 <T_1+0x9c>)
 80002c0:	601a      	str	r2, [r3, #0]
	{
		//PRINT HERE PRIORITY
	//	xTaskHandle t_2;
	 //   xTaskHandle t_3;
	//cur_pri   = xtaskDetails.uxCurrentPriority;
			if(xSemaphoreTake(Uart_handler,portMAX_DELAY)){
 80002c2:	4b20      	ldr	r3, [pc, #128]	; (8000344 <T_1+0xa0>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f04f 31ff 	mov.w	r1, #4294967295
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 f936 	bl	800253c <xQueueSemaphoreTake>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d0f5      	beq.n	80002c2 <T_1+0x1e>

		 BaseType_t returned = xTaskCreate(T_3, NULL, 100, NULL,3, &t_3);
 80002d6:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <T_1+0xa4>)
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2303      	movs	r3, #3
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2300      	movs	r3, #0
 80002e0:	2264      	movs	r2, #100	; 0x64
 80002e2:	2100      	movs	r1, #0
 80002e4:	4819      	ldr	r0, [pc, #100]	; (800034c <T_1+0xa8>)
 80002e6:	f002 fc0e 	bl	8002b06 <xTaskCreate>
 80002ea:	6078      	str	r0, [r7, #4]
	    //PRINT HERE PRIORITY
	   // cur_pri   = xtaskDetails.uxCurrentPriority;
		 cur_pri = uxTaskPriorityGet(NULL);
 80002ec:	2000      	movs	r0, #0
 80002ee:	f002 fdb7 	bl	8002e60 <uxTaskPriorityGet>
 80002f2:	4602      	mov	r2, r0
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <T_1+0x9c>)
 80002f6:	601a      	str	r2, [r3, #0]
	     BaseType_t ret=  xTaskCreate(T_2, NULL, 100, NULL,2, &t_2);
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <T_1+0xac>)
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	2302      	movs	r3, #2
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2300      	movs	r3, #0
 8000302:	2264      	movs	r2, #100	; 0x64
 8000304:	2100      	movs	r1, #0
 8000306:	4813      	ldr	r0, [pc, #76]	; (8000354 <T_1+0xb0>)
 8000308:	f002 fbfd 	bl	8002b06 <xTaskCreate>
 800030c:	6038      	str	r0, [r7, #0]
	    //PRINT HERE PRIORITY
	     HAL_UART_Transmit(&huart1, (uint8_t*)"T_1\r\n", strlen("T_1 Started \r\n"), 10*2);
 800030e:	2314      	movs	r3, #20
 8000310:	220e      	movs	r2, #14
 8000312:	4911      	ldr	r1, [pc, #68]	; (8000358 <T_1+0xb4>)
 8000314:	4809      	ldr	r0, [pc, #36]	; (800033c <T_1+0x98>)
 8000316:	f001 faee 	bl	80018f6 <HAL_UART_Transmit>
	     xSemaphoreGive(Uart_handler);
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <T_1+0xa0>)
 800031c:	6818      	ldr	r0, [r3, #0]
 800031e:	2300      	movs	r3, #0
 8000320:	2200      	movs	r2, #0
 8000322:	2100      	movs	r1, #0
 8000324:	f001 fea0 	bl	8002068 <xQueueGenericSend>
		//vTaskDelay(1000);
	     //PRINT HERE PRIORITY
	     cur_pri = uxTaskPriorityGet(NULL);
 8000328:	2000      	movs	r0, #0
 800032a:	f002 fd99 	bl	8002e60 <uxTaskPriorityGet>
 800032e:	4602      	mov	r2, r0
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <T_1+0x9c>)
 8000332:	601a      	str	r2, [r3, #0]
			if(xSemaphoreTake(Uart_handler,portMAX_DELAY)){
 8000334:	e7c5      	b.n	80002c2 <T_1+0x1e>
 8000336:	bf00      	nop
 8000338:	080048f0 	.word	0x080048f0
 800033c:	20001940 	.word	0x20001940
 8000340:	20001984 	.word	0x20001984
 8000344:	2000002c 	.word	0x2000002c
 8000348:	20001938 	.word	0x20001938
 800034c:	0800038d 	.word	0x0800038d
 8000350:	2000193c 	.word	0x2000193c
 8000354:	0800035d 	.word	0x0800035d
 8000358:	08004900 	.word	0x08004900

0800035c <T_2>:
	}
}
}

void T_2(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t*)"T_2 Started \r\n", strlen("T_2 Started \r\n"), 10*2);//(UART_0,"T_2 Started \r\n");
 8000360:	2314      	movs	r3, #20
 8000362:	220e      	movs	r2, #14
 8000364:	4906      	ldr	r1, [pc, #24]	; (8000380 <T_2+0x24>)
 8000366:	4807      	ldr	r0, [pc, #28]	; (8000384 <T_2+0x28>)
 8000368:	f001 fac5 	bl	80018f6 <HAL_UART_Transmit>
	while(1)
	{
		HAL_UART_Transmit(&huart1,(uint8_t*)"T_2\r\n", strlen("T_2 Started \r\n"), 10*2);
 800036c:	2314      	movs	r3, #20
 800036e:	220e      	movs	r2, #14
 8000370:	4905      	ldr	r1, [pc, #20]	; (8000388 <T_2+0x2c>)
 8000372:	4804      	ldr	r0, [pc, #16]	; (8000384 <T_2+0x28>)
 8000374:	f001 fabf 	bl	80018f6 <HAL_UART_Transmit>
     //	vTaskDelay(500);
	vTaskDelete(NULL);
 8000378:	2000      	movs	r0, #0
 800037a:	f002 fcff 	bl	8002d7c <vTaskDelete>
		HAL_UART_Transmit(&huart1,(uint8_t*)"T_2\r\n", strlen("T_2 Started \r\n"), 10*2);
 800037e:	e7f5      	b.n	800036c <T_2+0x10>
 8000380:	08004908 	.word	0x08004908
 8000384:	20001940 	.word	0x20001940
 8000388:	08004918 	.word	0x08004918

0800038c <T_3>:
	}
}

void T_3(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)"T_3 Started \r\n", strlen("T_3 Started \r\n"), 10*2);//(UART_0,"T_2 Started \r\n");
 8000390:	2314      	movs	r3, #20
 8000392:	220e      	movs	r2, #14
 8000394:	490f      	ldr	r1, [pc, #60]	; (80003d4 <T_3+0x48>)
 8000396:	4810      	ldr	r0, [pc, #64]	; (80003d8 <T_3+0x4c>)
 8000398:	f001 faad 	bl	80018f6 <HAL_UART_Transmit>
		while(1)
		{
			if(xSemaphoreTake(Uart_handler,portMAX_DELAY)){
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <T_3+0x50>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f04f 31ff 	mov.w	r1, #4294967295
 80003a4:	4618      	mov	r0, r3
 80003a6:	f002 f8c9 	bl	800253c <xQueueSemaphoreTake>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0f5      	beq.n	800039c <T_3+0x10>

			HAL_UART_Transmit(&huart1, (uint8_t*)"T_3\r\n", strlen("T_3 Started \r\n"), 10*2);
 80003b0:	2314      	movs	r3, #20
 80003b2:	220e      	movs	r2, #14
 80003b4:	490a      	ldr	r1, [pc, #40]	; (80003e0 <T_3+0x54>)
 80003b6:	4808      	ldr	r0, [pc, #32]	; (80003d8 <T_3+0x4c>)
 80003b8:	f001 fa9d 	bl	80018f6 <HAL_UART_Transmit>

			xSemaphoreGive(Uart_handler);
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <T_3+0x50>)
 80003be:	6818      	ldr	r0, [r3, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	2200      	movs	r2, #0
 80003c4:	2100      	movs	r1, #0
 80003c6:	f001 fe4f 	bl	8002068 <xQueueGenericSend>
			//vTaskDelay(500);
			vTaskDelete(NULL);
 80003ca:	2000      	movs	r0, #0
 80003cc:	f002 fcd6 	bl	8002d7c <vTaskDelete>
			if(xSemaphoreTake(Uart_handler,portMAX_DELAY)){
 80003d0:	e7e4      	b.n	800039c <T_3+0x10>
 80003d2:	bf00      	nop
 80003d4:	08004920 	.word	0x08004920
 80003d8:	20001940 	.word	0x20001940
 80003dc:	2000002c 	.word	0x2000002c
 80003e0:	08004930 	.word	0x08004930

080003e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d101      	bne.n	80003fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003f6:	f000 f945 	bl	8000684 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40012c00 	.word	0x40012c00

08000408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr

08000414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <HAL_MspInit+0x5c>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	4a14      	ldr	r2, [pc, #80]	; (8000470 <HAL_MspInit+0x5c>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6193      	str	r3, [r2, #24]
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <HAL_MspInit+0x5c>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <HAL_MspInit+0x5c>)
 8000434:	69db      	ldr	r3, [r3, #28]
 8000436:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <HAL_MspInit+0x5c>)
 8000438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800043c:	61d3      	str	r3, [r2, #28]
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <HAL_MspInit+0x5c>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_MspInit+0x60>)
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	4a04      	ldr	r2, [pc, #16]	; (8000474 <HAL_MspInit+0x60>)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000466:	bf00      	nop
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000
 8000474:	40010000 	.word	0x40010000

08000478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <HAL_UART_MspInit+0x8c>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d131      	bne.n	80004fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <HAL_UART_MspInit+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a1a      	ldr	r2, [pc, #104]	; (8000508 <HAL_UART_MspInit+0x90>)
 800049e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b15      	ldr	r3, [pc, #84]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a14      	ldr	r2, [pc, #80]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ce:	2302      	movs	r3, #2
 80004d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d2:	2303      	movs	r3, #3
 80004d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	4619      	mov	r1, r3
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <HAL_UART_MspInit+0x94>)
 80004de:	f000 f9cd 	bl	800087c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <HAL_UART_MspInit+0x94>)
 80004f8:	f000 f9c0 	bl	800087c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004fc:	bf00      	nop
 80004fe:	3720      	adds	r7, #32
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40013800 	.word	0x40013800
 8000508:	40021000 	.word	0x40021000
 800050c:	40010800 	.word	0x40010800

08000510 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08c      	sub	sp, #48	; 0x30
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000520:	2200      	movs	r2, #0
 8000522:	6879      	ldr	r1, [r7, #4]
 8000524:	2019      	movs	r0, #25
 8000526:	f000 f97e 	bl	8000826 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800052a:	2019      	movs	r0, #25
 800052c:	f000 f997 	bl	800085e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <HAL_InitTick+0x9c>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a1d      	ldr	r2, [pc, #116]	; (80005ac <HAL_InitTick+0x9c>)
 8000536:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <HAL_InitTick+0x9c>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000548:	f107 0210 	add.w	r2, r7, #16
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	4611      	mov	r1, r2
 8000552:	4618      	mov	r0, r3
 8000554:	f000 feea 	bl	800132c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000558:	f000 fed4 	bl	8001304 <HAL_RCC_GetPCLK2Freq>
 800055c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000560:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <HAL_InitTick+0xa0>)
 8000562:	fba2 2303 	umull	r2, r3, r2, r3
 8000566:	0c9b      	lsrs	r3, r3, #18
 8000568:	3b01      	subs	r3, #1
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_InitTick+0xa4>)
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <HAL_InitTick+0xa8>)
 8000570:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <HAL_InitTick+0xa4>)
 8000574:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000578:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_InitTick+0xa4>)
 800057c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800057e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_InitTick+0xa4>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_InitTick+0xa4>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800058c:	4809      	ldr	r0, [pc, #36]	; (80005b4 <HAL_InitTick+0xa4>)
 800058e:	f000 ff1b 	bl	80013c8 <HAL_TIM_Base_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d104      	bne.n	80005a2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <HAL_InitTick+0xa4>)
 800059a:	f000 ff6d 	bl	8001478 <HAL_TIM_Base_Start_IT>
 800059e:	4603      	mov	r3, r0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3730      	adds	r7, #48	; 0x30
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	431bde83 	.word	0x431bde83
 80005b4:	200019ac 	.word	0x200019ac
 80005b8:	40012c00 	.word	0x40012c00

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <HardFault_Handler+0x4>

080005ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <MemManage_Handler+0x4>

080005d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <BusFault_Handler+0x4>

080005da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <UsageFault_Handler+0x4>

080005e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <TIM1_UP_IRQHandler+0x10>)
 80005f2:	f000 ff93 	bl	800151c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200019ac 	.word	0x200019ac

08000600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800060e:	490d      	ldr	r1, [pc, #52]	; (8000644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000614:	e002      	b.n	800061c <LoopCopyDataInit>

08000616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061a:	3304      	adds	r3, #4

0800061c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800061c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000620:	d3f9      	bcc.n	8000616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000624:	4c0a      	ldr	r4, [pc, #40]	; (8000650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000628:	e001      	b.n	800062e <LoopFillZerobss>

0800062a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800062c:	3204      	adds	r2, #4

0800062e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000630:	d3fb      	bcc.n	800062a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000632:	f7ff ffe5 	bl	8000600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000636:	f004 f911 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fd89 	bl	8000150 <main>
  bx lr
 800063e:	4770      	bx	lr
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000648:	0800499c 	.word	0x0800499c
  ldr r2, =_sbss
 800064c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000650:	20001a38 	.word	0x20001a38

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_Init+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_Init+0x28>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f8d1 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff ff4e 	bl	8000510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000674:	f7ff fece 	bl	8000414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <HAL_IncTick+0x1c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <HAL_IncTick+0x20>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a03      	ldr	r2, [pc, #12]	; (80006a4 <HAL_IncTick+0x20>)
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000008 	.word	0x20000008
 80006a4:	200019f4 	.word	0x200019f4

080006a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return uwTick;
 80006ac:	4b02      	ldr	r3, [pc, #8]	; (80006b8 <HAL_GetTick+0x10>)
 80006ae:	681b      	ldr	r3, [r3, #0]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	200019f4 	.word	0x200019f4

080006bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d8:	4013      	ands	r3, r2
 80006da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ee:	4a04      	ldr	r2, [pc, #16]	; (8000700 <__NVIC_SetPriorityGrouping+0x44>)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	60d3      	str	r3, [r2, #12]
}
 80006f4:	bf00      	nop
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <__NVIC_GetPriorityGrouping+0x18>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	f003 0307 	and.w	r3, r3, #7
}
 8000712:	4618      	mov	r0, r3
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db0b      	blt.n	800074a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	f003 021f 	and.w	r2, r3, #31
 8000738:	4906      	ldr	r1, [pc, #24]	; (8000754 <__NVIC_EnableIRQ+0x34>)
 800073a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073e:	095b      	lsrs	r3, r3, #5
 8000740:	2001      	movs	r0, #1
 8000742:	fa00 f202 	lsl.w	r2, r0, r2
 8000746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	; 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff4f 	bl	80006bc <__NVIC_SetPriorityGrouping>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000838:	f7ff ff64 	bl	8000704 <__NVIC_GetPriorityGrouping>
 800083c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	6978      	ldr	r0, [r7, #20]
 8000844:	f7ff ffb2 	bl	80007ac <NVIC_EncodePriority>
 8000848:	4602      	mov	r2, r0
 800084a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff81 	bl	8000758 <__NVIC_SetPriority>
}
 8000856:	bf00      	nop
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff57 	bl	8000720 <__NVIC_EnableIRQ>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	b480      	push	{r7}
 800087e:	b08b      	sub	sp, #44	; 0x2c
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800088e:	e127      	b.n	8000ae0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000890:	2201      	movs	r2, #1
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	f040 8116 	bne.w	8000ada <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b12      	cmp	r3, #18
 80008b4:	d034      	beq.n	8000920 <HAL_GPIO_Init+0xa4>
 80008b6:	2b12      	cmp	r3, #18
 80008b8:	d80d      	bhi.n	80008d6 <HAL_GPIO_Init+0x5a>
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d02b      	beq.n	8000916 <HAL_GPIO_Init+0x9a>
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d804      	bhi.n	80008cc <HAL_GPIO_Init+0x50>
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d031      	beq.n	800092a <HAL_GPIO_Init+0xae>
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d01c      	beq.n	8000904 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ca:	e048      	b.n	800095e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d043      	beq.n	8000958 <HAL_GPIO_Init+0xdc>
 80008d0:	2b11      	cmp	r3, #17
 80008d2:	d01b      	beq.n	800090c <HAL_GPIO_Init+0x90>
          break;
 80008d4:	e043      	b.n	800095e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008d6:	4a89      	ldr	r2, [pc, #548]	; (8000afc <HAL_GPIO_Init+0x280>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d026      	beq.n	800092a <HAL_GPIO_Init+0xae>
 80008dc:	4a87      	ldr	r2, [pc, #540]	; (8000afc <HAL_GPIO_Init+0x280>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d806      	bhi.n	80008f0 <HAL_GPIO_Init+0x74>
 80008e2:	4a87      	ldr	r2, [pc, #540]	; (8000b00 <HAL_GPIO_Init+0x284>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d020      	beq.n	800092a <HAL_GPIO_Init+0xae>
 80008e8:	4a86      	ldr	r2, [pc, #536]	; (8000b04 <HAL_GPIO_Init+0x288>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d01d      	beq.n	800092a <HAL_GPIO_Init+0xae>
          break;
 80008ee:	e036      	b.n	800095e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008f0:	4a85      	ldr	r2, [pc, #532]	; (8000b08 <HAL_GPIO_Init+0x28c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d019      	beq.n	800092a <HAL_GPIO_Init+0xae>
 80008f6:	4a85      	ldr	r2, [pc, #532]	; (8000b0c <HAL_GPIO_Init+0x290>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d016      	beq.n	800092a <HAL_GPIO_Init+0xae>
 80008fc:	4a84      	ldr	r2, [pc, #528]	; (8000b10 <HAL_GPIO_Init+0x294>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d013      	beq.n	800092a <HAL_GPIO_Init+0xae>
          break;
 8000902:	e02c      	b.n	800095e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e028      	b.n	800095e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	3304      	adds	r3, #4
 8000912:	623b      	str	r3, [r7, #32]
          break;
 8000914:	e023      	b.n	800095e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	3308      	adds	r3, #8
 800091c:	623b      	str	r3, [r7, #32]
          break;
 800091e:	e01e      	b.n	800095e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	330c      	adds	r3, #12
 8000926:	623b      	str	r3, [r7, #32]
          break;
 8000928:	e019      	b.n	800095e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d102      	bne.n	8000938 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000932:	2304      	movs	r3, #4
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e012      	b.n	800095e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d105      	bne.n	800094c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000940:	2308      	movs	r3, #8
 8000942:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	69fa      	ldr	r2, [r7, #28]
 8000948:	611a      	str	r2, [r3, #16]
          break;
 800094a:	e008      	b.n	800095e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800094c:	2308      	movs	r3, #8
 800094e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	69fa      	ldr	r2, [r7, #28]
 8000954:	615a      	str	r2, [r3, #20]
          break;
 8000956:	e002      	b.n	800095e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
          break;
 800095c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	2bff      	cmp	r3, #255	; 0xff
 8000962:	d801      	bhi.n	8000968 <HAL_GPIO_Init+0xec>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	e001      	b.n	800096c <HAL_GPIO_Init+0xf0>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3304      	adds	r3, #4
 800096c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	2bff      	cmp	r3, #255	; 0xff
 8000972:	d802      	bhi.n	800097a <HAL_GPIO_Init+0xfe>
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	e002      	b.n	8000980 <HAL_GPIO_Init+0x104>
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	3b08      	subs	r3, #8
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	210f      	movs	r1, #15
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	401a      	ands	r2, r3
 8000992:	6a39      	ldr	r1, [r7, #32]
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	431a      	orrs	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 8096 	beq.w	8000ada <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ae:	4b59      	ldr	r3, [pc, #356]	; (8000b14 <HAL_GPIO_Init+0x298>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	4a58      	ldr	r2, [pc, #352]	; (8000b14 <HAL_GPIO_Init+0x298>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	4b56      	ldr	r3, [pc, #344]	; (8000b14 <HAL_GPIO_Init+0x298>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009c6:	4a54      	ldr	r2, [pc, #336]	; (8000b18 <HAL_GPIO_Init+0x29c>)
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	4013      	ands	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4b      	ldr	r2, [pc, #300]	; (8000b1c <HAL_GPIO_Init+0x2a0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d013      	beq.n	8000a1a <HAL_GPIO_Init+0x19e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4a      	ldr	r2, [pc, #296]	; (8000b20 <HAL_GPIO_Init+0x2a4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d00d      	beq.n	8000a16 <HAL_GPIO_Init+0x19a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a49      	ldr	r2, [pc, #292]	; (8000b24 <HAL_GPIO_Init+0x2a8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d007      	beq.n	8000a12 <HAL_GPIO_Init+0x196>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a48      	ldr	r2, [pc, #288]	; (8000b28 <HAL_GPIO_Init+0x2ac>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_GPIO_Init+0x192>
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x1a0>
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x1a0>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e002      	b.n	8000a1c <HAL_GPIO_Init+0x1a0>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_GPIO_Init+0x1a0>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a1e:	f002 0203 	and.w	r2, r2, #3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4093      	lsls	r3, r2
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a2c:	493a      	ldr	r1, [pc, #232]	; (8000b18 <HAL_GPIO_Init+0x29c>)
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d006      	beq.n	8000a54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4938      	ldr	r1, [pc, #224]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	600b      	str	r3, [r1, #0]
 8000a52:	e006      	b.n	8000a62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a54:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	4933      	ldr	r1, [pc, #204]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a5e:	4013      	ands	r3, r2
 8000a60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d006      	beq.n	8000a7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	492e      	ldr	r1, [pc, #184]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	604b      	str	r3, [r1, #4]
 8000a7a:	e006      	b.n	8000a8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	4929      	ldr	r1, [pc, #164]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a86:	4013      	ands	r3, r2
 8000a88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	4924      	ldr	r1, [pc, #144]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	608b      	str	r3, [r1, #8]
 8000aa2:	e006      	b.n	8000ab2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	491f      	ldr	r1, [pc, #124]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000aae:	4013      	ands	r3, r2
 8000ab0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000ac0:	68da      	ldr	r2, [r3, #12]
 8000ac2:	491a      	ldr	r1, [pc, #104]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	60cb      	str	r3, [r1, #12]
 8000aca:	e006      	b.n	8000ada <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4915      	ldr	r1, [pc, #84]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	3301      	adds	r3, #1
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f47f aed0 	bne.w	8000890 <HAL_GPIO_Init+0x14>
  }
}
 8000af0:	bf00      	nop
 8000af2:	372c      	adds	r7, #44	; 0x2c
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	10210000 	.word	0x10210000
 8000b00:	10110000 	.word	0x10110000
 8000b04:	10120000 	.word	0x10120000
 8000b08:	10310000 	.word	0x10310000
 8000b0c:	10320000 	.word	0x10320000
 8000b10:	10220000 	.word	0x10220000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40011400 	.word	0x40011400
 8000b2c:	40010400 	.word	0x40010400

08000b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e26c      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 8087 	beq.w	8000c5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b50:	4b92      	ldr	r3, [pc, #584]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 030c 	and.w	r3, r3, #12
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	d00c      	beq.n	8000b76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b5c:	4b8f      	ldr	r3, [pc, #572]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 030c 	and.w	r3, r3, #12
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d112      	bne.n	8000b8e <HAL_RCC_OscConfig+0x5e>
 8000b68:	4b8c      	ldr	r3, [pc, #560]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b74:	d10b      	bne.n	8000b8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b76:	4b89      	ldr	r3, [pc, #548]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d06c      	beq.n	8000c5c <HAL_RCC_OscConfig+0x12c>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d168      	bne.n	8000c5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e246      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b96:	d106      	bne.n	8000ba6 <HAL_RCC_OscConfig+0x76>
 8000b98:	4b80      	ldr	r3, [pc, #512]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a7f      	ldr	r2, [pc, #508]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	e02e      	b.n	8000c04 <HAL_RCC_OscConfig+0xd4>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d10c      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x98>
 8000bae:	4b7b      	ldr	r3, [pc, #492]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a7a      	ldr	r2, [pc, #488]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	4b78      	ldr	r3, [pc, #480]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a77      	ldr	r2, [pc, #476]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	e01d      	b.n	8000c04 <HAL_RCC_OscConfig+0xd4>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bd0:	d10c      	bne.n	8000bec <HAL_RCC_OscConfig+0xbc>
 8000bd2:	4b72      	ldr	r3, [pc, #456]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a71      	ldr	r2, [pc, #452]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	4b6f      	ldr	r3, [pc, #444]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a6e      	ldr	r2, [pc, #440]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e00b      	b.n	8000c04 <HAL_RCC_OscConfig+0xd4>
 8000bec:	4b6b      	ldr	r3, [pc, #428]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a6a      	ldr	r2, [pc, #424]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4b68      	ldr	r3, [pc, #416]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a67      	ldr	r2, [pc, #412]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d013      	beq.n	8000c34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fd4c 	bl	80006a8 <HAL_GetTick>
 8000c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c12:	e008      	b.n	8000c26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c14:	f7ff fd48 	bl	80006a8 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	2b64      	cmp	r3, #100	; 0x64
 8000c20:	d901      	bls.n	8000c26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e1fa      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c26:	4b5d      	ldr	r3, [pc, #372]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f0      	beq.n	8000c14 <HAL_RCC_OscConfig+0xe4>
 8000c32:	e014      	b.n	8000c5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fd38 	bl	80006a8 <HAL_GetTick>
 8000c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c3c:	f7ff fd34 	bl	80006a8 <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b64      	cmp	r3, #100	; 0x64
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e1e6      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4e:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f0      	bne.n	8000c3c <HAL_RCC_OscConfig+0x10c>
 8000c5a:	e000      	b.n	8000c5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d063      	beq.n	8000d32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c6a:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 030c 	and.w	r3, r3, #12
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00b      	beq.n	8000c8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c76:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 030c 	and.w	r3, r3, #12
 8000c7e:	2b08      	cmp	r3, #8
 8000c80:	d11c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x18c>
 8000c82:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d116      	bne.n	8000cbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8e:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x176>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d001      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e1ba      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca6:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	4939      	ldr	r1, [pc, #228]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cba:	e03a      	b.n	8000d32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d020      	beq.n	8000d06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc4:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <HAL_RCC_OscConfig+0x270>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cca:	f7ff fced 	bl	80006a8 <HAL_GetTick>
 8000cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd0:	e008      	b.n	8000ce4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fce9 	bl	80006a8 <HAL_GetTick>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d901      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e19b      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0f0      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4927      	ldr	r1, [pc, #156]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000d00:	4313      	orrs	r3, r2
 8000d02:	600b      	str	r3, [r1, #0]
 8000d04:	e015      	b.n	8000d32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <HAL_RCC_OscConfig+0x270>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fccc 	bl	80006a8 <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d14:	f7ff fcc8 	bl	80006a8 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e17a      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d26:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f0      	bne.n	8000d14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d03a      	beq.n	8000db4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d019      	beq.n	8000d7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_RCC_OscConfig+0x274>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d4c:	f7ff fcac 	bl	80006a8 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d52:	e008      	b.n	8000d66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d54:	f7ff fca8 	bl	80006a8 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d901      	bls.n	8000d66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e15a      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_RCC_OscConfig+0x26c>)
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f0      	beq.n	8000d54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f000 fb0a 	bl	800138c <RCC_Delay>
 8000d78:	e01c      	b.n	8000db4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_RCC_OscConfig+0x274>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d80:	f7ff fc92 	bl	80006a8 <HAL_GetTick>
 8000d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d86:	e00f      	b.n	8000da8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d88:	f7ff fc8e 	bl	80006a8 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d908      	bls.n	8000da8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e140      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	42420000 	.word	0x42420000
 8000da4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da8:	4b9e      	ldr	r3, [pc, #632]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1e9      	bne.n	8000d88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80a6 	beq.w	8000f0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc6:	4b97      	ldr	r3, [pc, #604]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10d      	bne.n	8000dee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b94      	ldr	r3, [pc, #592]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a93      	ldr	r2, [pc, #588]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b91      	ldr	r3, [pc, #580]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dea:	2301      	movs	r3, #1
 8000dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dee:	4b8e      	ldr	r3, [pc, #568]	; (8001028 <HAL_RCC_OscConfig+0x4f8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d118      	bne.n	8000e2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dfa:	4b8b      	ldr	r3, [pc, #556]	; (8001028 <HAL_RCC_OscConfig+0x4f8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a8a      	ldr	r2, [pc, #552]	; (8001028 <HAL_RCC_OscConfig+0x4f8>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e06:	f7ff fc4f 	bl	80006a8 <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e0e:	f7ff fc4b 	bl	80006a8 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b64      	cmp	r3, #100	; 0x64
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e0fd      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e20:	4b81      	ldr	r3, [pc, #516]	; (8001028 <HAL_RCC_OscConfig+0x4f8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <HAL_RCC_OscConfig+0x312>
 8000e34:	4b7b      	ldr	r3, [pc, #492]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4a7a      	ldr	r2, [pc, #488]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6213      	str	r3, [r2, #32]
 8000e40:	e02d      	b.n	8000e9e <HAL_RCC_OscConfig+0x36e>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x334>
 8000e4a:	4b76      	ldr	r3, [pc, #472]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e4c:	6a1b      	ldr	r3, [r3, #32]
 8000e4e:	4a75      	ldr	r2, [pc, #468]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	f023 0301 	bic.w	r3, r3, #1
 8000e54:	6213      	str	r3, [r2, #32]
 8000e56:	4b73      	ldr	r3, [pc, #460]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	4a72      	ldr	r2, [pc, #456]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	6213      	str	r3, [r2, #32]
 8000e62:	e01c      	b.n	8000e9e <HAL_RCC_OscConfig+0x36e>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d10c      	bne.n	8000e86 <HAL_RCC_OscConfig+0x356>
 8000e6c:	4b6d      	ldr	r3, [pc, #436]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4a6c      	ldr	r2, [pc, #432]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6213      	str	r3, [r2, #32]
 8000e78:	4b6a      	ldr	r3, [pc, #424]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	4a69      	ldr	r2, [pc, #420]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6213      	str	r3, [r2, #32]
 8000e84:	e00b      	b.n	8000e9e <HAL_RCC_OscConfig+0x36e>
 8000e86:	4b67      	ldr	r3, [pc, #412]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4a66      	ldr	r2, [pc, #408]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	6213      	str	r3, [r2, #32]
 8000e92:	4b64      	ldr	r3, [pc, #400]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	4a63      	ldr	r2, [pc, #396]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000e98:	f023 0304 	bic.w	r3, r3, #4
 8000e9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d015      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fbff 	bl	80006a8 <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eac:	e00a      	b.n	8000ec4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eae:	f7ff fbfb 	bl	80006a8 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e0ab      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec4:	4b57      	ldr	r3, [pc, #348]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0ee      	beq.n	8000eae <HAL_RCC_OscConfig+0x37e>
 8000ed0:	e014      	b.n	8000efc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fbe9 	bl	80006a8 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed8:	e00a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eda:	f7ff fbe5 	bl	80006a8 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e095      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef0:	4b4c      	ldr	r3, [pc, #304]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1ee      	bne.n	8000eda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d105      	bne.n	8000f0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f02:	4b48      	ldr	r3, [pc, #288]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a47      	ldr	r2, [pc, #284]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8081 	beq.w	800101a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f18:	4b42      	ldr	r3, [pc, #264]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d061      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d146      	bne.n	8000fba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f2c:	4b3f      	ldr	r3, [pc, #252]	; (800102c <HAL_RCC_OscConfig+0x4fc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f32:	f7ff fbb9 	bl	80006a8 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f3a:	f7ff fbb5 	bl	80006a8 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e067      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f4c:	4b35      	ldr	r3, [pc, #212]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f0      	bne.n	8000f3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f60:	d108      	bne.n	8000f74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f62:	4b30      	ldr	r3, [pc, #192]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	492d      	ldr	r1, [pc, #180]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f74:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a19      	ldr	r1, [r3, #32]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	430b      	orrs	r3, r1
 8000f86:	4927      	ldr	r1, [pc, #156]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <HAL_RCC_OscConfig+0x4fc>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f92:	f7ff fb89 	bl	80006a8 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9a:	f7ff fb85 	bl	80006a8 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e037      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f0      	beq.n	8000f9a <HAL_RCC_OscConfig+0x46a>
 8000fb8:	e02f      	b.n	800101a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_RCC_OscConfig+0x4fc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fb72 	bl	80006a8 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc8:	f7ff fb6e 	bl	80006a8 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e020      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x498>
 8000fe6:	e018      	b.n	800101a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d101      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e013      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_RCC_OscConfig+0x4f4>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	429a      	cmp	r2, r3
 8001006:	d106      	bne.n	8001016 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001012:	429a      	cmp	r2, r3
 8001014:	d001      	beq.n	800101a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	40007000 	.word	0x40007000
 800102c:	42420060 	.word	0x42420060

08001030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0d0      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001044:	4b6a      	ldr	r3, [pc, #424]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d910      	bls.n	8001074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001052:	4b67      	ldr	r3, [pc, #412]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f023 0207 	bic.w	r2, r3, #7
 800105a:	4965      	ldr	r1, [pc, #404]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	4313      	orrs	r3, r2
 8001060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001062:	4b63      	ldr	r3, [pc, #396]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0b8      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d020      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800108c:	4b59      	ldr	r3, [pc, #356]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a58      	ldr	r2, [pc, #352]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001096:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a4:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b0:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	494d      	ldr	r1, [pc, #308]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d040      	beq.n	8001150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d107      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d115      	bne.n	800110e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e07f      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d107      	bne.n	80010fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d109      	bne.n	800110e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e073      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fe:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e06b      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800110e:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f023 0203 	bic.w	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4936      	ldr	r1, [pc, #216]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001120:	f7ff fac2 	bl	80006a8 <HAL_GetTick>
 8001124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001126:	e00a      	b.n	800113e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001128:	f7ff fabe 	bl	80006a8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f241 3288 	movw	r2, #5000	; 0x1388
 8001136:	4293      	cmp	r3, r2
 8001138:	d901      	bls.n	800113e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e053      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 020c 	and.w	r2, r3, #12
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	429a      	cmp	r2, r3
 800114e:	d1eb      	bne.n	8001128 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d210      	bcs.n	8001180 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 0207 	bic.w	r2, r3, #7
 8001166:	4922      	ldr	r1, [pc, #136]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d001      	beq.n	8001180 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e032      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d008      	beq.n	800119e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	4916      	ldr	r1, [pc, #88]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	4313      	orrs	r3, r2
 800119c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	490e      	ldr	r1, [pc, #56]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011be:	f000 f821 	bl	8001204 <HAL_RCC_GetSysClockFreq>
 80011c2:	4601      	mov	r1, r0
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_RCC_ClockConfig+0x1c8>)
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
 80011d2:	fa21 f303 	lsr.w	r3, r1, r3
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <HAL_RCC_ClockConfig+0x1cc>)
 80011d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_RCC_ClockConfig+0x1d0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f996 	bl	8000510 <HAL_InitTick>

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40021000 	.word	0x40021000
 80011f8:	0800497c 	.word	0x0800497c
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001204:	b490      	push	{r4, r7}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800120a:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800120c:	1d3c      	adds	r4, r7, #4
 800120e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b04      	cmp	r3, #4
 800123c:	d002      	beq.n	8001244 <HAL_RCC_GetSysClockFreq+0x40>
 800123e:	2b08      	cmp	r3, #8
 8001240:	d003      	beq.n	800124a <HAL_RCC_GetSysClockFreq+0x46>
 8001242:	e02d      	b.n	80012a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001246:	623b      	str	r3, [r7, #32]
      break;
 8001248:	e02d      	b.n	80012a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	0c9b      	lsrs	r3, r3, #18
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001256:	4413      	add	r3, r2
 8001258:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800125c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d013      	beq.n	8001290 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	0c5b      	lsrs	r3, r3, #17
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001276:	4413      	add	r3, r2
 8001278:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800127c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	4a0f      	ldr	r2, [pc, #60]	; (80012c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001282:	fb02 f203 	mul.w	r2, r2, r3
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	fbb2 f3f3 	udiv	r3, r2, r3
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
 800128e:	e004      	b.n	800129a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001294:	fb02 f303 	mul.w	r3, r2, r3
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	623b      	str	r3, [r7, #32]
      break;
 800129e:	e002      	b.n	80012a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012a2:	623b      	str	r3, [r7, #32]
      break;
 80012a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012a6:	6a3b      	ldr	r3, [r7, #32]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3728      	adds	r7, #40	; 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc90      	pop	{r4, r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	08004950 	.word	0x08004950
 80012b8:	08004960 	.word	0x08004960
 80012bc:	40021000 	.word	0x40021000
 80012c0:	007a1200 	.word	0x007a1200
 80012c4:	003d0900 	.word	0x003d0900

080012c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	20000000 	.word	0x20000000

080012dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012e0:	f7ff fff2 	bl	80012c8 <HAL_RCC_GetHCLKFreq>
 80012e4:	4601      	mov	r1, r0
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	4a03      	ldr	r2, [pc, #12]	; (8001300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	0800498c 	.word	0x0800498c

08001304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001308:	f7ff ffde 	bl	80012c8 <HAL_RCC_GetHCLKFreq>
 800130c:	4601      	mov	r1, r0
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	0adb      	lsrs	r3, r3, #11
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	4a03      	ldr	r2, [pc, #12]	; (8001328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800131a:	5cd3      	ldrb	r3, [r2, r3]
 800131c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000
 8001328:	0800498c 	.word	0x0800498c

0800132c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	220f      	movs	r2, #15
 800133a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_RCC_GetClockConfig+0x58>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_RCC_GetClockConfig+0x58>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_GetClockConfig+0x58>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_RCC_GetClockConfig+0x58>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	08db      	lsrs	r3, r3, #3
 8001366:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_RCC_GetClockConfig+0x5c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0207 	and.w	r2, r3, #7
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000
 8001388:	40022000 	.word	0x40022000

0800138c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <RCC_Delay+0x34>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <RCC_Delay+0x38>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	0a5b      	lsrs	r3, r3, #9
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013a8:	bf00      	nop
  }
  while (Delay --);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	60fa      	str	r2, [r7, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f9      	bne.n	80013a8 <RCC_Delay+0x1c>
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000000 	.word	0x20000000
 80013c4:	10624dd3 	.word	0x10624dd3

080013c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e041      	b.n	800145e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f839 	bl	8001466 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3304      	adds	r3, #4
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f000 f9b4 	bl	8001774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d001      	beq.n	8001490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e03a      	b.n	8001506 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0201 	orr.w	r2, r2, #1
 80014a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a18      	ldr	r2, [pc, #96]	; (8001510 <HAL_TIM_Base_Start_IT+0x98>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00e      	beq.n	80014d0 <HAL_TIM_Base_Start_IT+0x58>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ba:	d009      	beq.n	80014d0 <HAL_TIM_Base_Start_IT+0x58>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <HAL_TIM_Base_Start_IT+0x9c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d004      	beq.n	80014d0 <HAL_TIM_Base_Start_IT+0x58>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <HAL_TIM_Base_Start_IT+0xa0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d111      	bne.n	80014f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d010      	beq.n	8001504 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0201 	orr.w	r2, r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f2:	e007      	b.n	8001504 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0201 	orr.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	40012c00 	.word	0x40012c00
 8001514:	40000400 	.word	0x40000400
 8001518:	40000800 	.word	0x40000800

0800151c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b02      	cmp	r3, #2
 8001530:	d122      	bne.n	8001578 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b02      	cmp	r3, #2
 800153e:	d11b      	bne.n	8001578 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f06f 0202 	mvn.w	r2, #2
 8001548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f8ed 	bl	800173e <HAL_TIM_IC_CaptureCallback>
 8001564:	e005      	b.n	8001572 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f8e0 	bl	800172c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f8ef 	bl	8001750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b04      	cmp	r3, #4
 8001584:	d122      	bne.n	80015cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b04      	cmp	r3, #4
 8001592:	d11b      	bne.n	80015cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f06f 0204 	mvn.w	r2, #4
 800159c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2202      	movs	r2, #2
 80015a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f8c3 	bl	800173e <HAL_TIM_IC_CaptureCallback>
 80015b8:	e005      	b.n	80015c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8b6 	bl	800172c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f8c5 	bl	8001750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d122      	bne.n	8001620 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d11b      	bne.n	8001620 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f06f 0208 	mvn.w	r2, #8
 80015f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2204      	movs	r2, #4
 80015f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f899 	bl	800173e <HAL_TIM_IC_CaptureCallback>
 800160c:	e005      	b.n	800161a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f88c 	bl	800172c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f89b 	bl	8001750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b10      	cmp	r3, #16
 800162c:	d122      	bne.n	8001674 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	2b10      	cmp	r3, #16
 800163a:	d11b      	bne.n	8001674 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f06f 0210 	mvn.w	r2, #16
 8001644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2208      	movs	r2, #8
 800164a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f86f 	bl	800173e <HAL_TIM_IC_CaptureCallback>
 8001660:	e005      	b.n	800166e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f862 	bl	800172c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f871 	bl	8001750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b01      	cmp	r3, #1
 8001680:	d10e      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d107      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0201 	mvn.w	r2, #1
 8001698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7fe fea2 	bl	80003e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016aa:	2b80      	cmp	r3, #128	; 0x80
 80016ac:	d10e      	bne.n	80016cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b8:	2b80      	cmp	r3, #128	; 0x80
 80016ba:	d107      	bne.n	80016cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f8bf 	bl	800184a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d6:	2b40      	cmp	r3, #64	; 0x40
 80016d8:	d10e      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e4:	2b40      	cmp	r3, #64	; 0x40
 80016e6:	d107      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f835 	bl	8001762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	f003 0320 	and.w	r3, r3, #32
 8001702:	2b20      	cmp	r3, #32
 8001704:	d10e      	bne.n	8001724 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b20      	cmp	r3, #32
 8001712:	d107      	bne.n	8001724 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f06f 0220 	mvn.w	r2, #32
 800171c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f88a 	bl	8001838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a29      	ldr	r2, [pc, #164]	; (800182c <TIM_Base_SetConfig+0xb8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00b      	beq.n	80017a4 <TIM_Base_SetConfig+0x30>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001792:	d007      	beq.n	80017a4 <TIM_Base_SetConfig+0x30>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a26      	ldr	r2, [pc, #152]	; (8001830 <TIM_Base_SetConfig+0xbc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d003      	beq.n	80017a4 <TIM_Base_SetConfig+0x30>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a25      	ldr	r2, [pc, #148]	; (8001834 <TIM_Base_SetConfig+0xc0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d108      	bne.n	80017b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a1c      	ldr	r2, [pc, #112]	; (800182c <TIM_Base_SetConfig+0xb8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00b      	beq.n	80017d6 <TIM_Base_SetConfig+0x62>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c4:	d007      	beq.n	80017d6 <TIM_Base_SetConfig+0x62>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <TIM_Base_SetConfig+0xbc>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d003      	beq.n	80017d6 <TIM_Base_SetConfig+0x62>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <TIM_Base_SetConfig+0xc0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d108      	bne.n	80017e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a07      	ldr	r2, [pc, #28]	; (800182c <TIM_Base_SetConfig+0xb8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d103      	bne.n	800181c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	615a      	str	r2, [r3, #20]
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40012c00 	.word	0x40012c00
 8001830:	40000400 	.word	0x40000400
 8001834:	40000800 	.word	0x40000800

08001838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e03f      	b.n	80018ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d106      	bne.n	8001888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7fe fdf8 	bl	8000478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2224      	movs	r2, #36	; 0x24
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800189e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f905 	bl	8001ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695a      	ldr	r2, [r3, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2220      	movs	r2, #32
 80018e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b08a      	sub	sp, #40	; 0x28
 80018fa:	af02      	add	r7, sp, #8
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	4613      	mov	r3, r2
 8001904:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b20      	cmp	r3, #32
 8001914:	d17c      	bne.n	8001a10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <HAL_UART_Transmit+0x2c>
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e075      	b.n	8001a12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_UART_Transmit+0x3e>
 8001930:	2302      	movs	r3, #2
 8001932:	e06e      	b.n	8001a12 <HAL_UART_Transmit+0x11c>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2221      	movs	r2, #33	; 0x21
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800194a:	f7fe fead 	bl	80006a8 <HAL_GetTick>
 800194e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	88fa      	ldrh	r2, [r7, #6]
 8001954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001964:	d108      	bne.n	8001978 <HAL_UART_Transmit+0x82>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d104      	bne.n	8001978 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	e003      	b.n	8001980 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001988:	e02a      	b.n	80019e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2200      	movs	r2, #0
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f840 	bl	8001a1a <UART_WaitOnFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e036      	b.n	8001a12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10b      	bne.n	80019c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	3302      	adds	r3, #2
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	e007      	b.n	80019d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	781a      	ldrb	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	3301      	adds	r3, #1
 80019d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1cf      	bne.n	800198a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2200      	movs	r2, #0
 80019f2:	2140      	movs	r1, #64	; 0x40
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f810 	bl	8001a1a <UART_WaitOnFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e006      	b.n	8001a12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2220      	movs	r2, #32
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e000      	b.n	8001a12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001a10:	2302      	movs	r3, #2
  }
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4613      	mov	r3, r2
 8001a28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a2a:	e02c      	b.n	8001a86 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a32:	d028      	beq.n	8001a86 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <UART_WaitOnFlagUntilTimeout+0x30>
 8001a3a:	f7fe fe35 	bl	80006a8 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d21d      	bcs.n	8001a86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a58:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0201 	bic.w	r2, r2, #1
 8001a68:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2220      	movs	r2, #32
 8001a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e00f      	b.n	8001aa6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d0c3      	beq.n	8001a2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001aea:	f023 030c 	bic.w	r3, r3, #12
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <UART_SetConfig+0x114>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d103      	bne.n	8001b20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b18:	f7ff fbf4 	bl	8001304 <HAL_RCC_GetPCLK2Freq>
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	e002      	b.n	8001b26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b20:	f7ff fbdc 	bl	80012dc <HAL_RCC_GetPCLK1Freq>
 8001b24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009a      	lsls	r2, r3, #2
 8001b30:	441a      	add	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <UART_SetConfig+0x118>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	0119      	lsls	r1, r3, #4
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009a      	lsls	r2, r3, #2
 8001b50:	441a      	add	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <UART_SetConfig+0x118>)
 8001b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2064      	movs	r0, #100	; 0x64
 8001b66:	fb00 f303 	mul.w	r3, r0, r3
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	3332      	adds	r3, #50	; 0x32
 8001b70:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <UART_SetConfig+0x118>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b7c:	4419      	add	r1, r3
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	009a      	lsls	r2, r3, #2
 8001b88:	441a      	add	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <UART_SetConfig+0x118>)
 8001b96:	fba3 0302 	umull	r0, r3, r3, r2
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2064      	movs	r0, #100	; 0x64
 8001b9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	011b      	lsls	r3, r3, #4
 8001ba6:	3332      	adds	r3, #50	; 0x32
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <UART_SetConfig+0x118>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	f003 020f 	and.w	r2, r3, #15
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	440a      	add	r2, r1
 8001bba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40013800 	.word	0x40013800
 8001bc8:	51eb851f 	.word	0x51eb851f

08001bcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a06      	ldr	r2, [pc, #24]	; (8001bf4 <vApplicationGetIdleTaskMemory+0x28>)
 8001bdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001be2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2280      	movs	r2, #128	; 0x80
 8001be8:	601a      	str	r2, [r3, #0]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	20000030 	.word	0x20000030
 8001bf8:	2000008c 	.word	0x2000008c

08001bfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <vApplicationGetTimerTaskMemory+0x2c>)
 8001c0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <vApplicationGetTimerTaskMemory+0x30>)
 8001c12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c1a:	601a      	str	r2, [r3, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	2000028c 	.word	0x2000028c
 8001c2c:	200002e8 	.word	0x200002e8

08001c30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f103 0208 	add.w	r2, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f04f 32ff 	mov.w	r2, #4294967295
 8001c48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f103 0208 	add.w	r2, r3, #8
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f103 0208 	add.w	r2, r3, #8
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce2:	d103      	bne.n	8001cec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	e00c      	b.n	8001d06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3308      	adds	r3, #8
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	e002      	b.n	8001cfa <vListInsert+0x2e>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d2f6      	bcs.n	8001cf4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6892      	ldr	r2, [r2, #8]
 8001d52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6852      	ldr	r2, [r2, #4]
 8001d5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d103      	bne.n	8001d70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	1e5a      	subs	r2, r3, #1
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da8:	f383 8811 	msr	BASEPRI, r3
 8001dac:	f3bf 8f6f 	isb	sy
 8001db0:	f3bf 8f4f 	dsb	sy
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	e7fe      	b.n	8001db6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001db8:	f002 fa86 	bl	80042c8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	441a      	add	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	3b01      	subs	r3, #1
 8001dea:	68f9      	ldr	r1, [r7, #12]
 8001dec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	441a      	add	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	22ff      	movs	r2, #255	; 0xff
 8001dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	22ff      	movs	r2, #255	; 0xff
 8001e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d114      	bne.n	8001e38 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d01a      	beq.n	8001e4c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	3310      	adds	r3, #16
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f001 fabe 	bl	800339c <xTaskRemoveFromEventList>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <xQueueGenericReset+0xcc>)
 8001e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	e009      	b.n	8001e4c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3310      	adds	r3, #16
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fef7 	bl	8001c30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3324      	adds	r3, #36	; 0x24
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fef2 	bl	8001c30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e4c:	f002 fa6a 	bl	8004324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e50:	2301      	movs	r3, #1
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000ed04 	.word	0xe000ed04

08001e60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08e      	sub	sp, #56	; 0x38
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
 8001e6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <xQueueGenericCreateStatic+0x28>
 8001e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e78:	f383 8811 	msr	BASEPRI, r3
 8001e7c:	f3bf 8f6f 	isb	sy
 8001e80:	f3bf 8f4f 	dsb	sy
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e86:	e7fe      	b.n	8001e86 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <xQueueGenericCreateStatic+0x42>
 8001e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e92:	f383 8811 	msr	BASEPRI, r3
 8001e96:	f3bf 8f6f 	isb	sy
 8001e9a:	f3bf 8f4f 	dsb	sy
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea0:	e7fe      	b.n	8001ea0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <xQueueGenericCreateStatic+0x4e>
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <xQueueGenericCreateStatic+0x52>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <xQueueGenericCreateStatic+0x54>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d109      	bne.n	8001ecc <xQueueGenericCreateStatic+0x6c>
 8001eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ebc:	f383 8811 	msr	BASEPRI, r3
 8001ec0:	f3bf 8f6f 	isb	sy
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	623b      	str	r3, [r7, #32]
 8001eca:	e7fe      	b.n	8001eca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <xQueueGenericCreateStatic+0x78>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <xQueueGenericCreateStatic+0x7c>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <xQueueGenericCreateStatic+0x7e>
 8001edc:	2300      	movs	r3, #0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <xQueueGenericCreateStatic+0x96>
 8001ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	f3bf 8f6f 	isb	sy
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	61fb      	str	r3, [r7, #28]
 8001ef4:	e7fe      	b.n	8001ef4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001ef6:	2350      	movs	r3, #80	; 0x50
 8001ef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b50      	cmp	r3, #80	; 0x50
 8001efe:	d009      	beq.n	8001f14 <xQueueGenericCreateStatic+0xb4>
 8001f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f04:	f383 8811 	msr	BASEPRI, r3
 8001f08:	f3bf 8f6f 	isb	sy
 8001f0c:	f3bf 8f4f 	dsb	sy
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	e7fe      	b.n	8001f12 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00d      	beq.n	8001f3a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	68b9      	ldr	r1, [r7, #8]
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f842 	bl	8001fbe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3730      	adds	r7, #48	; 0x30
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <xQueueGenericCreate+0x28>
 8001f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f5c:	f383 8811 	msr	BASEPRI, r3
 8001f60:	f3bf 8f6f 	isb	sy
 8001f64:	f3bf 8f4f 	dsb	sy
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	e7fe      	b.n	8001f6a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e004      	b.n	8001f82 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	fb02 f303 	mul.w	r3, r2, r3
 8001f80:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3350      	adds	r3, #80	; 0x50
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 fa94 	bl	80044b4 <pvPortMalloc>
 8001f8c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00f      	beq.n	8001fb4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	3350      	adds	r3, #80	; 0x50
 8001f98:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f805 	bl	8001fbe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
	}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e002      	b.n	8001fe0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fec:	2101      	movs	r1, #1
 8001fee:	69b8      	ldr	r0, [r7, #24]
 8001ff0:	f7ff fece 	bl	8001d90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00e      	beq.n	8002030 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002024:	2300      	movs	r3, #0
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f81c 	bl	8002068 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002042:	2301      	movs	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	461a      	mov	r2, r3
 800204e:	6939      	ldr	r1, [r7, #16]
 8002050:	6978      	ldr	r0, [r7, #20]
 8002052:	f7ff ff77 	bl	8001f44 <xQueueGenericCreate>
 8002056:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f7ff ffd3 	bl	8002004 <prvInitialiseMutex>

		return pxNewQueue;
 800205e:	68fb      	ldr	r3, [r7, #12]
	}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08e      	sub	sp, #56	; 0x38
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002076:	2300      	movs	r3, #0
 8002078:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <xQueueGenericSend+0x30>
 8002084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002088:	f383 8811 	msr	BASEPRI, r3
 800208c:	f3bf 8f6f 	isb	sy
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
 8002096:	e7fe      	b.n	8002096 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d103      	bne.n	80020a6 <xQueueGenericSend+0x3e>
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <xQueueGenericSend+0x42>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <xQueueGenericSend+0x44>
 80020aa:	2300      	movs	r3, #0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <xQueueGenericSend+0x5c>
 80020b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	e7fe      	b.n	80020c2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d103      	bne.n	80020d2 <xQueueGenericSend+0x6a>
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <xQueueGenericSend+0x6e>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <xQueueGenericSend+0x70>
 80020d6:	2300      	movs	r3, #0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d109      	bne.n	80020f0 <xQueueGenericSend+0x88>
 80020dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e0:	f383 8811 	msr	BASEPRI, r3
 80020e4:	f3bf 8f6f 	isb	sy
 80020e8:	f3bf 8f4f 	dsb	sy
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	e7fe      	b.n	80020ee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020f0:	f001 fb0e 	bl	8003710 <xTaskGetSchedulerState>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <xQueueGenericSend+0x98>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <xQueueGenericSend+0x9c>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <xQueueGenericSend+0x9e>
 8002104:	2300      	movs	r3, #0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <xQueueGenericSend+0xb6>
 800210a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	e7fe      	b.n	800211c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800211e:	f002 f8d3 	bl	80042c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <xQueueGenericSend+0xcc>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d129      	bne.n	8002188 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	68b9      	ldr	r1, [r7, #8]
 8002138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800213a:	f000 fb1e 	bl	800277a <prvCopyDataToQueue>
 800213e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2b00      	cmp	r3, #0
 8002146:	d010      	beq.n	800216a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	3324      	adds	r3, #36	; 0x24
 800214c:	4618      	mov	r0, r3
 800214e:	f001 f925 	bl	800339c <xTaskRemoveFromEventList>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002158:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <xQueueGenericSend+0x1f0>)
 800215a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	e00a      	b.n	8002180 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <xQueueGenericSend+0x1f0>)
 8002172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	f3bf 8f4f 	dsb	sy
 800217c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002180:	f002 f8d0 	bl	8004324 <vPortExitCritical>
				return pdPASS;
 8002184:	2301      	movs	r3, #1
 8002186:	e063      	b.n	8002250 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d103      	bne.n	8002196 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800218e:	f002 f8c9 	bl	8004324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002192:	2300      	movs	r3, #0
 8002194:	e05c      	b.n	8002250 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002198:	2b00      	cmp	r3, #0
 800219a:	d106      	bne.n	80021aa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	4618      	mov	r0, r3
 80021a2:	f001 f95d 	bl	8003460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021aa:	f002 f8bb 	bl	8004324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021ae:	f000 fed5 	bl	8002f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021b2:	f002 f889 	bl	80042c8 <vPortEnterCritical>
 80021b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021bc:	b25b      	sxtb	r3, r3
 80021be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c2:	d103      	bne.n	80021cc <xQueueGenericSend+0x164>
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d103      	bne.n	80021e2 <xQueueGenericSend+0x17a>
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021e2:	f002 f89f 	bl	8004324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021e6:	1d3a      	adds	r2, r7, #4
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f001 f94c 	bl	800348c <xTaskCheckForTimeOut>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d124      	bne.n	8002244 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80021fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021fc:	f000 fbb5 	bl	800296a <prvIsQueueFull>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d018      	beq.n	8002238 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	3310      	adds	r3, #16
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f001 f876 	bl	8003300 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002216:	f000 fb40 	bl	800289a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800221a:	f000 fead 	bl	8002f78 <xTaskResumeAll>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	f47f af7c 	bne.w	800211e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <xQueueGenericSend+0x1f0>)
 8002228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f3bf 8f4f 	dsb	sy
 8002232:	f3bf 8f6f 	isb	sy
 8002236:	e772      	b.n	800211e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800223a:	f000 fb2e 	bl	800289a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800223e:	f000 fe9b 	bl	8002f78 <xTaskResumeAll>
 8002242:	e76c      	b.n	800211e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002246:	f000 fb28 	bl	800289a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800224a:	f000 fe95 	bl	8002f78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800224e:	2300      	movs	r3, #0
		}
	}
}
 8002250:	4618      	mov	r0, r3
 8002252:	3738      	adds	r7, #56	; 0x38
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	e000ed04 	.word	0xe000ed04

0800225c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08e      	sub	sp, #56	; 0x38
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <xQueueGenericSendFromISR+0x2c>
 8002274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002278:	f383 8811 	msr	BASEPRI, r3
 800227c:	f3bf 8f6f 	isb	sy
 8002280:	f3bf 8f4f 	dsb	sy
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	e7fe      	b.n	8002286 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d103      	bne.n	8002296 <xQueueGenericSendFromISR+0x3a>
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <xQueueGenericSendFromISR+0x3e>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <xQueueGenericSendFromISR+0x40>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <xQueueGenericSendFromISR+0x58>
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	e7fe      	b.n	80022b2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d103      	bne.n	80022c2 <xQueueGenericSendFromISR+0x66>
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <xQueueGenericSendFromISR+0x6a>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <xQueueGenericSendFromISR+0x6c>
 80022c6:	2300      	movs	r3, #0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <xQueueGenericSendFromISR+0x84>
 80022cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e7fe      	b.n	80022de <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022e0:	f002 f8ac 	bl	800443c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80022e4:	f3ef 8211 	mrs	r2, BASEPRI
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	61ba      	str	r2, [r7, #24]
 80022fa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80022fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	429a      	cmp	r2, r3
 800230a:	d302      	bcc.n	8002312 <xQueueGenericSendFromISR+0xb6>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d12c      	bne.n	800236c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002322:	f000 fa2a 	bl	800277a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002326:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800232a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232e:	d112      	bne.n	8002356 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	2b00      	cmp	r3, #0
 8002336:	d016      	beq.n	8002366 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233a:	3324      	adds	r3, #36	; 0x24
 800233c:	4618      	mov	r0, r3
 800233e:	f001 f82d 	bl	800339c <xTaskRemoveFromEventList>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00e      	beq.n	8002366 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e007      	b.n	8002366 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002356:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800235a:	3301      	adds	r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	b25a      	sxtb	r2, r3
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002366:	2301      	movs	r3, #1
 8002368:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800236a:	e001      	b.n	8002370 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800236c:	2300      	movs	r3, #0
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800237a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800237c:	4618      	mov	r0, r3
 800237e:	3738      	adds	r7, #56	; 0x38
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	; 0x30
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <xQueueReceive+0x2e>
	__asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	e7fe      	b.n	80023b0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d103      	bne.n	80023c0 <xQueueReceive+0x3c>
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <xQueueReceive+0x40>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <xQueueReceive+0x42>
 80023c4:	2300      	movs	r3, #0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <xQueueReceive+0x5a>
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	e7fe      	b.n	80023dc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023de:	f001 f997 	bl	8003710 <xTaskGetSchedulerState>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <xQueueReceive+0x6a>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <xQueueReceive+0x6e>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <xQueueReceive+0x70>
 80023f2:	2300      	movs	r3, #0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d109      	bne.n	800240c <xQueueReceive+0x88>
 80023f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	e7fe      	b.n	800240a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800240c:	f001 ff5c 	bl	80042c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002414:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01f      	beq.n	800245c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002420:	f000 fa15 	bl	800284e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	1e5a      	subs	r2, r3, #1
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00f      	beq.n	8002454 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	3310      	adds	r3, #16
 8002438:	4618      	mov	r0, r3
 800243a:	f000 ffaf 	bl	800339c <xTaskRemoveFromEventList>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002444:	4b3c      	ldr	r3, [pc, #240]	; (8002538 <xQueueReceive+0x1b4>)
 8002446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002454:	f001 ff66 	bl	8004324 <vPortExitCritical>
				return pdPASS;
 8002458:	2301      	movs	r3, #1
 800245a:	e069      	b.n	8002530 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002462:	f001 ff5f 	bl	8004324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002466:	2300      	movs	r3, #0
 8002468:	e062      	b.n	8002530 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fff3 	bl	8003460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800247a:	2301      	movs	r3, #1
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800247e:	f001 ff51 	bl	8004324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002482:	f000 fd6b 	bl	8002f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002486:	f001 ff1f 	bl	80042c8 <vPortEnterCritical>
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002490:	b25b      	sxtb	r3, r3
 8002492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002496:	d103      	bne.n	80024a0 <xQueueReceive+0x11c>
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024a6:	b25b      	sxtb	r3, r3
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d103      	bne.n	80024b6 <xQueueReceive+0x132>
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024b6:	f001 ff35 	bl	8004324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024ba:	1d3a      	adds	r2, r7, #4
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 ffe2 	bl	800348c <xTaskCheckForTimeOut>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d123      	bne.n	8002516 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024d0:	f000 fa35 	bl	800293e <prvIsQueueEmpty>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d017      	beq.n	800250a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	3324      	adds	r3, #36	; 0x24
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 ff0c 	bl	8003300 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80024e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024ea:	f000 f9d6 	bl	800289a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80024ee:	f000 fd43 	bl	8002f78 <xTaskResumeAll>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d189      	bne.n	800240c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <xQueueReceive+0x1b4>)
 80024fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	e780      	b.n	800240c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800250a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800250c:	f000 f9c5 	bl	800289a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002510:	f000 fd32 	bl	8002f78 <xTaskResumeAll>
 8002514:	e77a      	b.n	800240c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002518:	f000 f9bf 	bl	800289a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800251c:	f000 fd2c 	bl	8002f78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002522:	f000 fa0c 	bl	800293e <prvIsQueueEmpty>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	f43f af6f 	beq.w	800240c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800252e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002530:	4618      	mov	r0, r3
 8002532:	3730      	adds	r7, #48	; 0x30
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	e000ed04 	.word	0xe000ed04

0800253c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08e      	sub	sp, #56	; 0x38
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002546:	2300      	movs	r3, #0
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800254e:	2300      	movs	r3, #0
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <xQueueSemaphoreTake+0x30>
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	623b      	str	r3, [r7, #32]
 800256a:	e7fe      	b.n	800256a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <xQueueSemaphoreTake+0x4c>
 8002574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002578:	f383 8811 	msr	BASEPRI, r3
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	f3bf 8f4f 	dsb	sy
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e7fe      	b.n	8002586 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002588:	f001 f8c2 	bl	8003710 <xTaskGetSchedulerState>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d102      	bne.n	8002598 <xQueueSemaphoreTake+0x5c>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <xQueueSemaphoreTake+0x60>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <xQueueSemaphoreTake+0x62>
 800259c:	2300      	movs	r3, #0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <xQueueSemaphoreTake+0x7a>
 80025a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	e7fe      	b.n	80025b4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80025b6:	f001 fe87 	bl	80042c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d024      	beq.n	8002610 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d104      	bne.n	80025e0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80025d6:	f001 fa17 	bl	8003a08 <pvTaskIncrementMutexHeldCount>
 80025da:	4602      	mov	r2, r0
 80025dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025de:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00f      	beq.n	8002608 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	3310      	adds	r3, #16
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fed5 	bl	800339c <xTaskRemoveFromEventList>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <xQueueSemaphoreTake+0x20c>)
 80025fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002608:	f001 fe8c 	bl	8004324 <vPortExitCritical>
				return pdPASS;
 800260c:	2301      	movs	r3, #1
 800260e:	e096      	b.n	800273e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d110      	bne.n	8002638 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	2b00      	cmp	r3, #0
 800261a:	d009      	beq.n	8002630 <xQueueSemaphoreTake+0xf4>
 800261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e7fe      	b.n	800262e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002630:	f001 fe78 	bl	8004324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002634:	2300      	movs	r3, #0
 8002636:	e082      	b.n	800273e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800263e:	f107 030c 	add.w	r3, r7, #12
 8002642:	4618      	mov	r0, r3
 8002644:	f000 ff0c 	bl	8003460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002648:	2301      	movs	r3, #1
 800264a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800264c:	f001 fe6a 	bl	8004324 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002650:	f000 fc84 	bl	8002f5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002654:	f001 fe38 	bl	80042c8 <vPortEnterCritical>
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800265e:	b25b      	sxtb	r3, r3
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d103      	bne.n	800266e <xQueueSemaphoreTake+0x132>
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002674:	b25b      	sxtb	r3, r3
 8002676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267a:	d103      	bne.n	8002684 <xQueueSemaphoreTake+0x148>
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002684:	f001 fe4e 	bl	8004324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002688:	463a      	mov	r2, r7
 800268a:	f107 030c 	add.w	r3, r7, #12
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fefb 	bl	800348c <xTaskCheckForTimeOut>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d132      	bne.n	8002702 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800269c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800269e:	f000 f94e 	bl	800293e <prvIsQueueEmpty>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d026      	beq.n	80026f6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80026b0:	f001 fe0a 	bl	80042c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f001 f847 	bl	800374c <xTaskPriorityInherit>
 80026be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80026c0:	f001 fe30 	bl	8004324 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	3324      	adds	r3, #36	; 0x24
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fe17 	bl	8003300 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80026d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026d4:	f000 f8e1 	bl	800289a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80026d8:	f000 fc4e 	bl	8002f78 <xTaskResumeAll>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f47f af69 	bne.w	80025b6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <xQueueSemaphoreTake+0x20c>)
 80026e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	e75f      	b.n	80025b6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80026f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026f8:	f000 f8cf 	bl	800289a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026fc:	f000 fc3c 	bl	8002f78 <xTaskResumeAll>
 8002700:	e759      	b.n	80025b6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002702:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002704:	f000 f8c9 	bl	800289a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002708:	f000 fc36 	bl	8002f78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800270c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800270e:	f000 f916 	bl	800293e <prvIsQueueEmpty>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	f43f af4e 	beq.w	80025b6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00d      	beq.n	800273c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8002720:	f001 fdd2 	bl	80042c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002726:	f000 f811 	bl	800274c <prvGetDisinheritPriorityAfterTimeout>
 800272a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002732:	4618      	mov	r0, r3
 8002734:	f001 f8e4 	bl	8003900 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002738:	f001 fdf4 	bl	8004324 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800273c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800273e:	4618      	mov	r0, r3
 8002740:	3738      	adds	r7, #56	; 0x38
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e001      	b.n	800276e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800276e:	68fb      	ldr	r3, [r7, #12]
	}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10d      	bne.n	80027b4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d14d      	bne.n	800283c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 f83f 	bl	8003828 <xTaskPriorityDisinherit>
 80027aa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	e043      	b.n	800283c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6898      	ldr	r0, [r3, #8]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	461a      	mov	r2, r3
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	f002 f86d 	bl	80048a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	441a      	add	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d32b      	bcc.n	800283c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	e026      	b.n	800283c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	68d8      	ldr	r0, [r3, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	461a      	mov	r2, r3
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	f002 f853 	bl	80048a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	425b      	negs	r3, r3
 8002808:	441a      	add	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d207      	bcs.n	800282a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	425b      	negs	r3, r3
 8002824:	441a      	add	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d105      	bne.n	800283c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	3b01      	subs	r3, #1
 800283a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002844:	697b      	ldr	r3, [r7, #20]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	2b00      	cmp	r3, #0
 800285e:	d018      	beq.n	8002892 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	441a      	add	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d303      	bcc.n	8002882 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68d9      	ldr	r1, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	461a      	mov	r2, r3
 800288c:	6838      	ldr	r0, [r7, #0]
 800288e:	f002 f809 	bl	80048a4 <memcpy>
	}
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80028a2:	f001 fd11 	bl	80042c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ac:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028ae:	e011      	b.n	80028d4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d012      	beq.n	80028de <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3324      	adds	r3, #36	; 0x24
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fd6d 	bl	800339c <xTaskRemoveFromEventList>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80028c8:	f000 fe40 	bl	800354c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	dce9      	bgt.n	80028b0 <prvUnlockQueue+0x16>
 80028dc:	e000      	b.n	80028e0 <prvUnlockQueue+0x46>
					break;
 80028de:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	22ff      	movs	r2, #255	; 0xff
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80028e8:	f001 fd1c 	bl	8004324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80028ec:	f001 fcec 	bl	80042c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028f6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80028f8:	e011      	b.n	800291e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d012      	beq.n	8002928 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3310      	adds	r3, #16
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fd48 	bl	800339c <xTaskRemoveFromEventList>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002912:	f000 fe1b 	bl	800354c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002916:	7bbb      	ldrb	r3, [r7, #14]
 8002918:	3b01      	subs	r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800291e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002922:	2b00      	cmp	r3, #0
 8002924:	dce9      	bgt.n	80028fa <prvUnlockQueue+0x60>
 8002926:	e000      	b.n	800292a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002928:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	22ff      	movs	r2, #255	; 0xff
 800292e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002932:	f001 fcf7 	bl	8004324 <vPortExitCritical>
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002946:	f001 fcbf 	bl	80042c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002952:	2301      	movs	r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e001      	b.n	800295c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800295c:	f001 fce2 	bl	8004324 <vPortExitCritical>

	return xReturn;
 8002960:	68fb      	ldr	r3, [r7, #12]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002972:	f001 fca9 	bl	80042c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	429a      	cmp	r2, r3
 8002980:	d102      	bne.n	8002988 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002982:	2301      	movs	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e001      	b.n	800298c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800298c:	f001 fcca 	bl	8004324 <vPortExitCritical>

	return xReturn;
 8002990:	68fb      	ldr	r3, [r7, #12]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e014      	b.n	80029d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80029ac:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <vQueueAddToRegistry+0x4c>)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80029b8:	490b      	ldr	r1, [pc, #44]	; (80029e8 <vQueueAddToRegistry+0x4c>)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <vQueueAddToRegistry+0x4c>)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80029ce:	e005      	b.n	80029dc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3301      	adds	r3, #1
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b07      	cmp	r3, #7
 80029da:	d9e7      	bls.n	80029ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	200019f8 	.word	0x200019f8

080029ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029fc:	f001 fc64 	bl	80042c8 <vPortEnterCritical>
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a06:	b25b      	sxtb	r3, r3
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d103      	bne.n	8002a16 <vQueueWaitForMessageRestricted+0x2a>
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d103      	bne.n	8002a2c <vQueueWaitForMessageRestricted+0x40>
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a2c:	f001 fc7a 	bl	8004324 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d106      	bne.n	8002a46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3324      	adds	r3, #36	; 0x24
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 fc81 	bl	8003348 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002a46:	6978      	ldr	r0, [r7, #20]
 8002a48:	f7ff ff27 	bl	800289a <prvUnlockQueue>
	}
 8002a4c:	bf00      	nop
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08e      	sub	sp, #56	; 0x38
 8002a58:	af04      	add	r7, sp, #16
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <xTaskCreateStatic+0x28>
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	623b      	str	r3, [r7, #32]
 8002a7a:	e7fe      	b.n	8002a7a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <xTaskCreateStatic+0x42>
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	e7fe      	b.n	8002a94 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a96:	235c      	movs	r3, #92	; 0x5c
 8002a98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b5c      	cmp	r3, #92	; 0x5c
 8002a9e:	d009      	beq.n	8002ab4 <xTaskCreateStatic+0x60>
 8002aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e7fe      	b.n	8002ab2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01e      	beq.n	8002af8 <xTaskCreateStatic+0xa4>
 8002aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01b      	beq.n	8002af8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	2202      	movs	r2, #2
 8002ace:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9303      	str	r3, [sp, #12]
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	9302      	str	r3, [sp, #8]
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 f850 	bl	8002b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002af2:	f000 f8d3 	bl	8002c9c <prvAddNewTaskToReadyList>
 8002af6:	e001      	b.n	8002afc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002afc:	697b      	ldr	r3, [r7, #20]
	}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3728      	adds	r7, #40	; 0x28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b08c      	sub	sp, #48	; 0x30
 8002b0a:	af04      	add	r7, sp, #16
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	4613      	mov	r3, r2
 8002b14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 fcca 	bl	80044b4 <pvPortMalloc>
 8002b20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002b28:	205c      	movs	r0, #92	; 0x5c
 8002b2a:	f001 fcc3 	bl	80044b4 <pvPortMalloc>
 8002b2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b3c:	e005      	b.n	8002b4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f001 fd7a 	bl	8004638 <vPortFree>
 8002b44:	e001      	b.n	8002b4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d017      	beq.n	8002b80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b58:	88fa      	ldrh	r2, [r7, #6]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9303      	str	r3, [sp, #12]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	9302      	str	r3, [sp, #8]
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f80e 	bl	8002b90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b74:	69f8      	ldr	r0, [r7, #28]
 8002b76:	f000 f891 	bl	8002c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e002      	b.n	8002b86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
 8002b84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b86:	69bb      	ldr	r3, [r7, #24]
	}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	21a5      	movs	r1, #165	; 0xa5
 8002baa:	f001 fe86 	bl	80048ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <prvInitialiseNewTask+0x56>
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	e7fe      	b.n	8002be4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e012      	b.n	8002c12 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	7819      	ldrb	r1, [r3, #0]
 8002bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3334      	adds	r3, #52	; 0x34
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	2b0f      	cmp	r3, #15
 8002c16:	d9e9      	bls.n	8002bec <prvInitialiseNewTask+0x5c>
 8002c18:	e000      	b.n	8002c1c <prvInitialiseNewTask+0x8c>
		{
			break;
 8002c1a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c26:	2b37      	cmp	r3, #55	; 0x37
 8002c28:	d901      	bls.n	8002c2e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c2a:	2337      	movs	r3, #55	; 0x37
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	3304      	adds	r3, #4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f812 	bl	8001c6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	3318      	adds	r3, #24
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff f80d 	bl	8001c6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	68f9      	ldr	r1, [r7, #12]
 8002c7c:	69b8      	ldr	r0, [r7, #24]
 8002c7e:	f001 fa35 	bl	80040ec <pxPortInitialiseStack>
 8002c82:	4602      	mov	r2, r0
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c94:	bf00      	nop
 8002c96:	3720      	adds	r7, #32
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ca4:	f001 fb10 	bl	80042c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <prvAddNewTaskToReadyList+0xc4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	4a2c      	ldr	r2, [pc, #176]	; (8002d60 <prvAddNewTaskToReadyList+0xc4>)
 8002cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002cb2:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <prvAddNewTaskToReadyList+0xc8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cba:	4a2a      	ldr	r2, [pc, #168]	; (8002d64 <prvAddNewTaskToReadyList+0xc8>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cc0:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <prvAddNewTaskToReadyList+0xc4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d110      	bne.n	8002cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002cc8:	f000 fc64 	bl	8003594 <prvInitialiseTaskLists>
 8002ccc:	e00d      	b.n	8002cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002cce:	4b26      	ldr	r3, [pc, #152]	; (8002d68 <prvAddNewTaskToReadyList+0xcc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cd6:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <prvAddNewTaskToReadyList+0xc8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d802      	bhi.n	8002cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <prvAddNewTaskToReadyList+0xc8>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <prvAddNewTaskToReadyList+0xd0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <prvAddNewTaskToReadyList+0xd0>)
 8002cf2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <prvAddNewTaskToReadyList+0xd0>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <prvAddNewTaskToReadyList+0xd4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d903      	bls.n	8002d10 <prvAddNewTaskToReadyList+0x74>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <prvAddNewTaskToReadyList+0xd4>)
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4a15      	ldr	r2, [pc, #84]	; (8002d74 <prvAddNewTaskToReadyList+0xd8>)
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f7fe ffad 	bl	8001c86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d2c:	f001 fafa 	bl	8004324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d30:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <prvAddNewTaskToReadyList+0xcc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00e      	beq.n	8002d56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <prvAddNewTaskToReadyList+0xc8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d207      	bcs.n	8002d56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <prvAddNewTaskToReadyList+0xdc>)
 8002d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000bbc 	.word	0x20000bbc
 8002d64:	200006e8 	.word	0x200006e8
 8002d68:	20000bc8 	.word	0x20000bc8
 8002d6c:	20000bd8 	.word	0x20000bd8
 8002d70:	20000bc4 	.word	0x20000bc4
 8002d74:	200006ec 	.word	0x200006ec
 8002d78:	e000ed04 	.word	0xe000ed04

08002d7c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002d84:	f001 faa0 	bl	80042c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <vTaskDelete+0x18>
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <vTaskDelete+0xc4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	e000      	b.n	8002d96 <vTaskDelete+0x1a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe ffcd 	bl	8001d3c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3318      	adds	r3, #24
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe ffc4 	bl	8001d3c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002db4:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <vTaskDelete+0xc8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <vTaskDelete+0xc8>)
 8002dbc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <vTaskDelete+0xc4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d10b      	bne.n	8002de0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	481e      	ldr	r0, [pc, #120]	; (8002e48 <vTaskDelete+0xcc>)
 8002dd0:	f7fe ff59 	bl	8001c86 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <vTaskDelete+0xd0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <vTaskDelete+0xd0>)
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e009      	b.n	8002df4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002de0:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <vTaskDelete+0xd4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <vTaskDelete+0xd4>)
 8002de8:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fc3e 	bl	800366c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002df0:	f000 fc6a 	bl	80036c8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002df4:	f001 fa96 	bl	8004324 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002df8:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <vTaskDelete+0xd8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01a      	beq.n	8002e36 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <vTaskDelete+0xc4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d115      	bne.n	8002e36 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <vTaskDelete+0xdc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <vTaskDelete+0xaa>
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	e7fe      	b.n	8002e24 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <vTaskDelete+0xe0>)
 8002e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200006e8 	.word	0x200006e8
 8002e44:	20000bd8 	.word	0x20000bd8
 8002e48:	20000b90 	.word	0x20000b90
 8002e4c:	20000ba4 	.word	0x20000ba4
 8002e50:	20000bbc 	.word	0x20000bbc
 8002e54:	20000bc8 	.word	0x20000bc8
 8002e58:	20000be4 	.word	0x20000be4
 8002e5c:	e000ed04 	.word	0xe000ed04

08002e60 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8002e68:	f001 fa2e 	bl	80042c8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <uxTaskPriorityGet+0x18>
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <uxTaskPriorityGet+0x30>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	e000      	b.n	8002e7a <uxTaskPriorityGet+0x1a>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8002e82:	f001 fa4f 	bl	8004324 <vPortExitCritical>

		return uxReturn;
 8002e86:	68bb      	ldr	r3, [r7, #8]
	}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	200006e8 	.word	0x200006e8

08002e94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ea2:	463a      	mov	r2, r7
 8002ea4:	1d39      	adds	r1, r7, #4
 8002ea6:	f107 0308 	add.w	r3, r7, #8
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fe8e 	bl	8001bcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002eb0:	6839      	ldr	r1, [r7, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	9202      	str	r2, [sp, #8]
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	460a      	mov	r2, r1
 8002ec2:	4920      	ldr	r1, [pc, #128]	; (8002f44 <vTaskStartScheduler+0xb0>)
 8002ec4:	4820      	ldr	r0, [pc, #128]	; (8002f48 <vTaskStartScheduler+0xb4>)
 8002ec6:	f7ff fdc5 	bl	8002a54 <xTaskCreateStatic>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <vTaskStartScheduler+0xb8>)
 8002ece:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ed0:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <vTaskStartScheduler+0xb8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	e001      	b.n	8002ee2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d102      	bne.n	8002eee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002ee8:	f000 fdf6 	bl	8003ad8 <xTimerCreateTimerTask>
 8002eec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d115      	bne.n	8002f20 <vTaskStartScheduler+0x8c>
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <vTaskStartScheduler+0xbc>)
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <vTaskStartScheduler+0xc0>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <vTaskStartScheduler+0xc4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002f1a:	f001 f965 	bl	80041e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002f1e:	e00d      	b.n	8002f3c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f26:	d109      	bne.n	8002f3c <vTaskStartScheduler+0xa8>
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e7fe      	b.n	8002f3a <vTaskStartScheduler+0xa6>
}
 8002f3c:	bf00      	nop
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	08004964 	.word	0x08004964
 8002f48:	08003565 	.word	0x08003565
 8002f4c:	20000be0 	.word	0x20000be0
 8002f50:	20000bdc 	.word	0x20000bdc
 8002f54:	20000bc8 	.word	0x20000bc8
 8002f58:	20000bc0 	.word	0x20000bc0

08002f5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <vTaskSuspendAll+0x18>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3301      	adds	r3, #1
 8002f66:	4a03      	ldr	r2, [pc, #12]	; (8002f74 <vTaskSuspendAll+0x18>)
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000be4 	.word	0x20000be4

08002f78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f86:	4b41      	ldr	r3, [pc, #260]	; (800308c <xTaskResumeAll+0x114>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <xTaskResumeAll+0x2a>
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	e7fe      	b.n	8002fa0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002fa2:	f001 f991 	bl	80042c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002fa6:	4b39      	ldr	r3, [pc, #228]	; (800308c <xTaskResumeAll+0x114>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	4a37      	ldr	r2, [pc, #220]	; (800308c <xTaskResumeAll+0x114>)
 8002fae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fb0:	4b36      	ldr	r3, [pc, #216]	; (800308c <xTaskResumeAll+0x114>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d162      	bne.n	800307e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fb8:	4b35      	ldr	r3, [pc, #212]	; (8003090 <xTaskResumeAll+0x118>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d05e      	beq.n	800307e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fc0:	e02f      	b.n	8003022 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002fc2:	4b34      	ldr	r3, [pc, #208]	; (8003094 <xTaskResumeAll+0x11c>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3318      	adds	r3, #24
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe feb4 	bl	8001d3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe feaf 	bl	8001d3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <xTaskResumeAll+0x120>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d903      	bls.n	8002ff2 <xTaskResumeAll+0x7a>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	4a2a      	ldr	r2, [pc, #168]	; (8003098 <xTaskResumeAll+0x120>)
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4a27      	ldr	r2, [pc, #156]	; (800309c <xTaskResumeAll+0x124>)
 8003000:	441a      	add	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3304      	adds	r3, #4
 8003006:	4619      	mov	r1, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f7fe fe3c 	bl	8001c86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003012:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <xTaskResumeAll+0x128>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800301c:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <xTaskResumeAll+0x12c>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003022:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <xTaskResumeAll+0x11c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1cb      	bne.n	8002fc2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003030:	f000 fb4a 	bl	80036c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003034:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <xTaskResumeAll+0x130>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d010      	beq.n	8003062 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003040:	f000 f844 	bl	80030cc <xTaskIncrementTick>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800304a:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <xTaskResumeAll+0x12c>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f1      	bne.n	8003040 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <xTaskResumeAll+0x130>)
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <xTaskResumeAll+0x12c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800306a:	2301      	movs	r3, #1
 800306c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <xTaskResumeAll+0x134>)
 8003070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800307e:	f001 f951 	bl	8004324 <vPortExitCritical>

	return xAlreadyYielded;
 8003082:	68bb      	ldr	r3, [r7, #8]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000be4 	.word	0x20000be4
 8003090:	20000bbc 	.word	0x20000bbc
 8003094:	20000b7c 	.word	0x20000b7c
 8003098:	20000bc4 	.word	0x20000bc4
 800309c:	200006ec 	.word	0x200006ec
 80030a0:	200006e8 	.word	0x200006e8
 80030a4:	20000bd0 	.word	0x20000bd0
 80030a8:	20000bcc 	.word	0x20000bcc
 80030ac:	e000ed04 	.word	0xe000ed04

080030b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <xTaskGetTickCount+0x18>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80030bc:	687b      	ldr	r3, [r7, #4]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	20000bc0 	.word	0x20000bc0

080030cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030d6:	4b51      	ldr	r3, [pc, #324]	; (800321c <xTaskIncrementTick+0x150>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 808d 	bne.w	80031fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030e0:	4b4f      	ldr	r3, [pc, #316]	; (8003220 <xTaskIncrementTick+0x154>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80030e8:	4a4d      	ldr	r2, [pc, #308]	; (8003220 <xTaskIncrementTick+0x154>)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11f      	bne.n	8003134 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80030f4:	4b4b      	ldr	r3, [pc, #300]	; (8003224 <xTaskIncrementTick+0x158>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <xTaskIncrementTick+0x46>
 80030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	e7fe      	b.n	8003110 <xTaskIncrementTick+0x44>
 8003112:	4b44      	ldr	r3, [pc, #272]	; (8003224 <xTaskIncrementTick+0x158>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	4b43      	ldr	r3, [pc, #268]	; (8003228 <xTaskIncrementTick+0x15c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a41      	ldr	r2, [pc, #260]	; (8003224 <xTaskIncrementTick+0x158>)
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4a41      	ldr	r2, [pc, #260]	; (8003228 <xTaskIncrementTick+0x15c>)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b41      	ldr	r3, [pc, #260]	; (800322c <xTaskIncrementTick+0x160>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3301      	adds	r3, #1
 800312c:	4a3f      	ldr	r2, [pc, #252]	; (800322c <xTaskIncrementTick+0x160>)
 800312e:	6013      	str	r3, [r2, #0]
 8003130:	f000 faca 	bl	80036c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003134:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <xTaskIncrementTick+0x164>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	429a      	cmp	r2, r3
 800313c:	d34e      	bcc.n	80031dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800313e:	4b39      	ldr	r3, [pc, #228]	; (8003224 <xTaskIncrementTick+0x158>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <xTaskIncrementTick+0x80>
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <xTaskIncrementTick+0x82>
 800314c:	2300      	movs	r3, #0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003152:	4b37      	ldr	r3, [pc, #220]	; (8003230 <xTaskIncrementTick+0x164>)
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	601a      	str	r2, [r3, #0]
					break;
 800315a:	e03f      	b.n	80031dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <xTaskIncrementTick+0x158>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d203      	bcs.n	800317c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003174:	4a2e      	ldr	r2, [pc, #184]	; (8003230 <xTaskIncrementTick+0x164>)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6013      	str	r3, [r2, #0]
						break;
 800317a:	e02f      	b.n	80031dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	3304      	adds	r3, #4
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe fddb 	bl	8001d3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d004      	beq.n	8003198 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3318      	adds	r3, #24
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe fdd2 	bl	8001d3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	4b25      	ldr	r3, [pc, #148]	; (8003234 <xTaskIncrementTick+0x168>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d903      	bls.n	80031ac <xTaskIncrementTick+0xe0>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	4a22      	ldr	r2, [pc, #136]	; (8003234 <xTaskIncrementTick+0x168>)
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <xTaskIncrementTick+0x16c>)
 80031ba:	441a      	add	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	3304      	adds	r3, #4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f7fe fd5f 	bl	8001c86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <xTaskIncrementTick+0x170>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3b3      	bcc.n	800313e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80031d6:	2301      	movs	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031da:	e7b0      	b.n	800313e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <xTaskIncrementTick+0x170>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e2:	4915      	ldr	r1, [pc, #84]	; (8003238 <xTaskIncrementTick+0x16c>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d907      	bls.n	8003204 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80031f4:	2301      	movs	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e004      	b.n	8003204 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <xTaskIncrementTick+0x174>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3301      	adds	r3, #1
 8003200:	4a0f      	ldr	r2, [pc, #60]	; (8003240 <xTaskIncrementTick+0x174>)
 8003202:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <xTaskIncrementTick+0x178>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800320c:	2301      	movs	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003210:	697b      	ldr	r3, [r7, #20]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000be4 	.word	0x20000be4
 8003220:	20000bc0 	.word	0x20000bc0
 8003224:	20000b74 	.word	0x20000b74
 8003228:	20000b78 	.word	0x20000b78
 800322c:	20000bd4 	.word	0x20000bd4
 8003230:	20000bdc 	.word	0x20000bdc
 8003234:	20000bc4 	.word	0x20000bc4
 8003238:	200006ec 	.word	0x200006ec
 800323c:	200006e8 	.word	0x200006e8
 8003240:	20000bcc 	.word	0x20000bcc
 8003244:	20000bd0 	.word	0x20000bd0

08003248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800324e:	4b27      	ldr	r3, [pc, #156]	; (80032ec <vTaskSwitchContext+0xa4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003256:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <vTaskSwitchContext+0xa8>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800325c:	e040      	b.n	80032e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <vTaskSwitchContext+0xa8>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <vTaskSwitchContext+0xac>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e00f      	b.n	800328c <vTaskSwitchContext+0x44>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <vTaskSwitchContext+0x3e>
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	e7fe      	b.n	8003284 <vTaskSwitchContext+0x3c>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3b01      	subs	r3, #1
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	491a      	ldr	r1, [pc, #104]	; (80032f8 <vTaskSwitchContext+0xb0>)
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0e5      	beq.n	800326c <vTaskSwitchContext+0x24>
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <vTaskSwitchContext+0xb0>)
 80032ac:	4413      	add	r3, r2
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3308      	adds	r3, #8
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d104      	bne.n	80032d0 <vTaskSwitchContext+0x88>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <vTaskSwitchContext+0xb4>)
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <vTaskSwitchContext+0xac>)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6013      	str	r3, [r2, #0]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000be4 	.word	0x20000be4
 80032f0:	20000bd0 	.word	0x20000bd0
 80032f4:	20000bc4 	.word	0x20000bc4
 80032f8:	200006ec 	.word	0x200006ec
 80032fc:	200006e8 	.word	0x200006e8

08003300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <vTaskPlaceOnEventList+0x24>
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e7fe      	b.n	8003322 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003324:	4b07      	ldr	r3, [pc, #28]	; (8003344 <vTaskPlaceOnEventList+0x44>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3318      	adds	r3, #24
 800332a:	4619      	mov	r1, r3
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7fe fccd 	bl	8001ccc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003332:	2101      	movs	r1, #1
 8003334:	6838      	ldr	r0, [r7, #0]
 8003336:	f000 fb7b 	bl	8003a30 <prvAddCurrentTaskToDelayedList>
}
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	200006e8 	.word	0x200006e8

08003348 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <vTaskPlaceOnEventListRestricted+0x26>
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e7fe      	b.n	800336c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <vTaskPlaceOnEventListRestricted+0x50>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3318      	adds	r3, #24
 8003374:	4619      	mov	r1, r3
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f7fe fc85 	bl	8001c86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295
 8003386:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	68b8      	ldr	r0, [r7, #8]
 800338c:	f000 fb50 	bl	8003a30 <prvAddCurrentTaskToDelayedList>
	}
 8003390:	bf00      	nop
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200006e8 	.word	0x200006e8

0800339c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <xTaskRemoveFromEventList+0x2a>
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e7fe      	b.n	80033c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3318      	adds	r3, #24
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fcb6 	bl	8001d3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033d0:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <xTaskRemoveFromEventList+0xac>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d11d      	bne.n	8003414 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	3304      	adds	r3, #4
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe fcad 	bl	8001d3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	4b19      	ldr	r3, [pc, #100]	; (800344c <xTaskRemoveFromEventList+0xb0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d903      	bls.n	80033f6 <xTaskRemoveFromEventList+0x5a>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	4a16      	ldr	r2, [pc, #88]	; (800344c <xTaskRemoveFromEventList+0xb0>)
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4a13      	ldr	r2, [pc, #76]	; (8003450 <xTaskRemoveFromEventList+0xb4>)
 8003404:	441a      	add	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	3304      	adds	r3, #4
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7fe fc3a 	bl	8001c86 <vListInsertEnd>
 8003412:	e005      	b.n	8003420 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	3318      	adds	r3, #24
 8003418:	4619      	mov	r1, r3
 800341a:	480e      	ldr	r0, [pc, #56]	; (8003454 <xTaskRemoveFromEventList+0xb8>)
 800341c:	f7fe fc33 	bl	8001c86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <xTaskRemoveFromEventList+0xbc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	429a      	cmp	r2, r3
 800342c:	d905      	bls.n	800343a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800342e:	2301      	movs	r3, #1
 8003430:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <xTaskRemoveFromEventList+0xc0>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e001      	b.n	800343e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800343e:	697b      	ldr	r3, [r7, #20]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000be4 	.word	0x20000be4
 800344c:	20000bc4 	.word	0x20000bc4
 8003450:	200006ec 	.word	0x200006ec
 8003454:	20000b7c 	.word	0x20000b7c
 8003458:	200006e8 	.word	0x200006e8
 800345c:	20000bd0 	.word	0x20000bd0

08003460 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003468:	4b06      	ldr	r3, [pc, #24]	; (8003484 <vTaskInternalSetTimeOutState+0x24>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <vTaskInternalSetTimeOutState+0x28>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	605a      	str	r2, [r3, #4]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000bd4 	.word	0x20000bd4
 8003488:	20000bc0 	.word	0x20000bc0

0800348c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <xTaskCheckForTimeOut+0x24>
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	e7fe      	b.n	80034ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <xTaskCheckForTimeOut+0x3e>
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e7fe      	b.n	80034c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80034ca:	f000 fefd 	bl	80042c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <xTaskCheckForTimeOut+0xb8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d102      	bne.n	80034ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e023      	b.n	8003536 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <xTaskCheckForTimeOut+0xbc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d007      	beq.n	800350a <xTaskCheckForTimeOut+0x7e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	429a      	cmp	r2, r3
 8003502:	d302      	bcc.n	800350a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003504:	2301      	movs	r3, #1
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	e015      	b.n	8003536 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	429a      	cmp	r2, r3
 8003512:	d20b      	bcs.n	800352c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	1ad2      	subs	r2, r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff9d 	bl	8003460 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	e004      	b.n	8003536 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003532:	2301      	movs	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003536:	f000 fef5 	bl	8004324 <vPortExitCritical>

	return xReturn;
 800353a:	69fb      	ldr	r3, [r7, #28]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3720      	adds	r7, #32
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000bc0 	.word	0x20000bc0
 8003548:	20000bd4 	.word	0x20000bd4

0800354c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <vTaskMissedYield+0x14>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000bd0 	.word	0x20000bd0

08003564 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800356c:	f000 f852 	bl	8003614 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <prvIdleTask+0x28>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d9f9      	bls.n	800356c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <prvIdleTask+0x2c>)
 800357a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003588:	e7f0      	b.n	800356c <prvIdleTask+0x8>
 800358a:	bf00      	nop
 800358c:	200006ec 	.word	0x200006ec
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	e00c      	b.n	80035ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <prvInitialiseTaskLists+0x60>)
 80035ac:	4413      	add	r3, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fb3e 	bl	8001c30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3301      	adds	r3, #1
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b37      	cmp	r3, #55	; 0x37
 80035be:	d9ef      	bls.n	80035a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035c0:	480d      	ldr	r0, [pc, #52]	; (80035f8 <prvInitialiseTaskLists+0x64>)
 80035c2:	f7fe fb35 	bl	8001c30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035c6:	480d      	ldr	r0, [pc, #52]	; (80035fc <prvInitialiseTaskLists+0x68>)
 80035c8:	f7fe fb32 	bl	8001c30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035cc:	480c      	ldr	r0, [pc, #48]	; (8003600 <prvInitialiseTaskLists+0x6c>)
 80035ce:	f7fe fb2f 	bl	8001c30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035d2:	480c      	ldr	r0, [pc, #48]	; (8003604 <prvInitialiseTaskLists+0x70>)
 80035d4:	f7fe fb2c 	bl	8001c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035d8:	480b      	ldr	r0, [pc, #44]	; (8003608 <prvInitialiseTaskLists+0x74>)
 80035da:	f7fe fb29 	bl	8001c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <prvInitialiseTaskLists+0x78>)
 80035e0:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <prvInitialiseTaskLists+0x64>)
 80035e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <prvInitialiseTaskLists+0x7c>)
 80035e6:	4a05      	ldr	r2, [pc, #20]	; (80035fc <prvInitialiseTaskLists+0x68>)
 80035e8:	601a      	str	r2, [r3, #0]
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200006ec 	.word	0x200006ec
 80035f8:	20000b4c 	.word	0x20000b4c
 80035fc:	20000b60 	.word	0x20000b60
 8003600:	20000b7c 	.word	0x20000b7c
 8003604:	20000b90 	.word	0x20000b90
 8003608:	20000ba8 	.word	0x20000ba8
 800360c:	20000b74 	.word	0x20000b74
 8003610:	20000b78 	.word	0x20000b78

08003614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800361a:	e019      	b.n	8003650 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800361c:	f000 fe54 	bl	80042c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <prvCheckTasksWaitingTermination+0x4c>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	3304      	adds	r3, #4
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe fb85 	bl	8001d3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <prvCheckTasksWaitingTermination+0x50>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3b01      	subs	r3, #1
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <prvCheckTasksWaitingTermination+0x50>)
 800363a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <prvCheckTasksWaitingTermination+0x54>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3b01      	subs	r3, #1
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <prvCheckTasksWaitingTermination+0x54>)
 8003644:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003646:	f000 fe6d 	bl	8004324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f80e 	bl	800366c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <prvCheckTasksWaitingTermination+0x54>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e1      	bne.n	800361c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003658:	bf00      	nop
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000b90 	.word	0x20000b90
 8003664:	20000bbc 	.word	0x20000bbc
 8003668:	20000ba4 	.word	0x20000ba4

0800366c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	4618      	mov	r0, r3
 8003684:	f000 ffd8 	bl	8004638 <vPortFree>
				vPortFree( pxTCB );
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 ffd5 	bl	8004638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800368e:	e017      	b.n	80036c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003696:	2b01      	cmp	r3, #1
 8003698:	d103      	bne.n	80036a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 ffcc 	bl	8004638 <vPortFree>
	}
 80036a0:	e00e      	b.n	80036c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d009      	beq.n	80036c0 <prvDeleteTCB+0x54>
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	e7fe      	b.n	80036be <prvDeleteTCB+0x52>
	}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ce:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <prvResetNextTaskUnblockTime+0x40>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <prvResetNextTaskUnblockTime+0x14>
 80036d8:	2301      	movs	r3, #1
 80036da:	e000      	b.n	80036de <prvResetNextTaskUnblockTime+0x16>
 80036dc:	2300      	movs	r3, #0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d004      	beq.n	80036ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <prvResetNextTaskUnblockTime+0x44>)
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036ea:	e008      	b.n	80036fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <prvResetNextTaskUnblockTime+0x40>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4a04      	ldr	r2, [pc, #16]	; (800370c <prvResetNextTaskUnblockTime+0x44>)
 80036fc:	6013      	str	r3, [r2, #0]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	20000b74 	.word	0x20000b74
 800370c:	20000bdc 	.word	0x20000bdc

08003710 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <xTaskGetSchedulerState+0x34>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800371e:	2301      	movs	r3, #1
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	e008      	b.n	8003736 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003724:	4b08      	ldr	r3, [pc, #32]	; (8003748 <xTaskGetSchedulerState+0x38>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800372c:	2302      	movs	r3, #2
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	e001      	b.n	8003736 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003732:	2300      	movs	r3, #0
 8003734:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003736:	687b      	ldr	r3, [r7, #4]
	}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000bc8 	.word	0x20000bc8
 8003748:	20000be4 	.word	0x20000be4

0800374c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d056      	beq.n	8003810 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003766:	4b2d      	ldr	r3, [pc, #180]	; (800381c <xTaskPriorityInherit+0xd0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	429a      	cmp	r2, r3
 800376e:	d246      	bcs.n	80037fe <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	db06      	blt.n	8003786 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003778:	4b28      	ldr	r3, [pc, #160]	; (800381c <xTaskPriorityInherit+0xd0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6959      	ldr	r1, [r3, #20]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4a22      	ldr	r2, [pc, #136]	; (8003820 <xTaskPriorityInherit+0xd4>)
 8003798:	4413      	add	r3, r2
 800379a:	4299      	cmp	r1, r3
 800379c:	d101      	bne.n	80037a2 <xTaskPriorityInherit+0x56>
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <xTaskPriorityInherit+0x58>
 80037a2:	2300      	movs	r3, #0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d022      	beq.n	80037ee <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe fac5 	bl	8001d3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80037b2:	4b1a      	ldr	r3, [pc, #104]	; (800381c <xTaskPriorityInherit+0xd0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	4b18      	ldr	r3, [pc, #96]	; (8003824 <xTaskPriorityInherit+0xd8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d903      	bls.n	80037d0 <xTaskPriorityInherit+0x84>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	4a15      	ldr	r2, [pc, #84]	; (8003824 <xTaskPriorityInherit+0xd8>)
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4a10      	ldr	r2, [pc, #64]	; (8003820 <xTaskPriorityInherit+0xd4>)
 80037de:	441a      	add	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f7fe fa4d 	bl	8001c86 <vListInsertEnd>
 80037ec:	e004      	b.n	80037f8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <xTaskPriorityInherit+0xd0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80037f8:	2301      	movs	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e008      	b.n	8003810 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <xTaskPriorityInherit+0xd0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	429a      	cmp	r2, r3
 800380a:	d201      	bcs.n	8003810 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800380c:	2301      	movs	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003810:	68fb      	ldr	r3, [r7, #12]
	}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200006e8 	.word	0x200006e8
 8003820:	200006ec 	.word	0x200006ec
 8003824:	20000bc4 	.word	0x20000bc4

08003828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d054      	beq.n	80038e8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800383e:	4b2d      	ldr	r3, [pc, #180]	; (80038f4 <xTaskPriorityDisinherit+0xcc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d009      	beq.n	800385c <xTaskPriorityDisinherit+0x34>
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e7fe      	b.n	800385a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <xTaskPriorityDisinherit+0x50>
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	e7fe      	b.n	8003876 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387c:	1e5a      	subs	r2, r3, #1
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388a:	429a      	cmp	r2, r3
 800388c:	d02c      	beq.n	80038e8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003892:	2b00      	cmp	r3, #0
 8003894:	d128      	bne.n	80038e8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	3304      	adds	r3, #4
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fa4e 	bl	8001d3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <xTaskPriorityDisinherit+0xd0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d903      	bls.n	80038c8 <xTaskPriorityDisinherit+0xa0>
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	4a0c      	ldr	r2, [pc, #48]	; (80038f8 <xTaskPriorityDisinherit+0xd0>)
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4a09      	ldr	r2, [pc, #36]	; (80038fc <xTaskPriorityDisinherit+0xd4>)
 80038d6:	441a      	add	r2, r3
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f7fe f9d1 	bl	8001c86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038e4:	2301      	movs	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038e8:	697b      	ldr	r3, [r7, #20]
	}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200006e8 	.word	0x200006e8
 80038f8:	20000bc4 	.word	0x20000bc4
 80038fc:	200006ec 	.word	0x200006ec

08003900 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800390e:	2301      	movs	r3, #1
 8003910:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d06d      	beq.n	80039f4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	2b00      	cmp	r3, #0
 800391e:	d109      	bne.n	8003934 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8003920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e7fe      	b.n	8003932 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d902      	bls.n	8003944 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e002      	b.n	800394a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	429a      	cmp	r2, r3
 8003952:	d04f      	beq.n	80039f4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	429a      	cmp	r2, r3
 800395c:	d14a      	bne.n	80039f4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800395e:	4b27      	ldr	r3, [pc, #156]	; (80039fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	429a      	cmp	r2, r3
 8003966:	d109      	bne.n	800397c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	e7fe      	b.n	800397a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	db04      	blt.n	800399a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	6959      	ldr	r1, [r3, #20]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80039aa:	4413      	add	r3, r2
 80039ac:	4299      	cmp	r1, r3
 80039ae:	d101      	bne.n	80039b4 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01c      	beq.n	80039f4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	3304      	adds	r3, #4
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe f9bc 	bl	8001d3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d903      	bls.n	80039d8 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	4a0b      	ldr	r2, [pc, #44]	; (8003a04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4a06      	ldr	r2, [pc, #24]	; (8003a00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80039e6:	441a      	add	r2, r3
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	3304      	adds	r3, #4
 80039ec:	4619      	mov	r1, r3
 80039ee:	4610      	mov	r0, r2
 80039f0:	f7fe f949 	bl	8001c86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039f4:	bf00      	nop
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	200006e8 	.word	0x200006e8
 8003a00:	200006ec 	.word	0x200006ec
 8003a04:	20000bc4 	.word	0x20000bc4

08003a08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <pvTaskIncrementMutexHeldCount+0x24>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d004      	beq.n	8003a1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <pvTaskIncrementMutexHeldCount+0x24>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a1a:	3201      	adds	r2, #1
 8003a1c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003a1e:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <pvTaskIncrementMutexHeldCount+0x24>)
 8003a20:	681b      	ldr	r3, [r3, #0]
	}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	200006e8 	.word	0x200006e8

08003a30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a3a:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a40:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe f978 	bl	8001d3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a52:	d10a      	bne.n	8003a6a <prvAddCurrentTaskToDelayedList+0x3a>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4819      	ldr	r0, [pc, #100]	; (8003ac8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a64:	f7fe f90f 	bl	8001c86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a68:	e026      	b.n	8003ab8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d209      	bcs.n	8003a96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f7fe f91c 	bl	8001ccc <vListInsert>
}
 8003a94:	e010      	b.n	8003ab8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a96:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f7fe f912 	bl	8001ccc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d202      	bcs.n	8003ab8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ab2:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	6013      	str	r3, [r2, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000bc0 	.word	0x20000bc0
 8003ac4:	200006e8 	.word	0x200006e8
 8003ac8:	20000ba8 	.word	0x20000ba8
 8003acc:	20000b78 	.word	0x20000b78
 8003ad0:	20000b74 	.word	0x20000b74
 8003ad4:	20000bdc 	.word	0x20000bdc

08003ad8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ae2:	f000 fac3 	bl	800406c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <xTimerCreateTimerTask+0x80>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d021      	beq.n	8003b32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003af6:	1d3a      	adds	r2, r7, #4
 8003af8:	f107 0108 	add.w	r1, r7, #8
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe f87b 	bl	8001bfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	9202      	str	r2, [sp, #8]
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	2302      	movs	r3, #2
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2300      	movs	r3, #0
 8003b16:	460a      	mov	r2, r1
 8003b18:	4910      	ldr	r1, [pc, #64]	; (8003b5c <xTimerCreateTimerTask+0x84>)
 8003b1a:	4811      	ldr	r0, [pc, #68]	; (8003b60 <xTimerCreateTimerTask+0x88>)
 8003b1c:	f7fe ff9a 	bl	8002a54 <xTaskCreateStatic>
 8003b20:	4602      	mov	r2, r0
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <xTimerCreateTimerTask+0x8c>)
 8003b24:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b26:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <xTimerCreateTimerTask+0x8c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <xTimerCreateTimerTask+0x74>
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	e7fe      	b.n	8003b4a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8003b4c:	697b      	ldr	r3, [r7, #20]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000c18 	.word	0x20000c18
 8003b5c:	0800496c 	.word	0x0800496c
 8003b60:	08003c81 	.word	0x08003c81
 8003b64:	20000c1c 	.word	0x20000c1c

08003b68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <xTimerGenericCommand+0x2c>
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	623b      	str	r3, [r7, #32]
 8003b92:	e7fe      	b.n	8003b92 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b94:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <xTimerGenericCommand+0x94>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d02a      	beq.n	8003bf2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b05      	cmp	r3, #5
 8003bac:	dc18      	bgt.n	8003be0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bae:	f7ff fdaf 	bl	8003710 <xTaskGetSchedulerState>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d109      	bne.n	8003bcc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <xTimerGenericCommand+0x94>)
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	f107 0110 	add.w	r1, r7, #16
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc4:	f7fe fa50 	bl	8002068 <xQueueGenericSend>
 8003bc8:	6278      	str	r0, [r7, #36]	; 0x24
 8003bca:	e012      	b.n	8003bf2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <xTimerGenericCommand+0x94>)
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	f107 0110 	add.w	r1, r7, #16
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f7fe fa46 	bl	8002068 <xQueueGenericSend>
 8003bdc:	6278      	str	r0, [r7, #36]	; 0x24
 8003bde:	e008      	b.n	8003bf2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <xTimerGenericCommand+0x94>)
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	f107 0110 	add.w	r1, r7, #16
 8003be8:	2300      	movs	r3, #0
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	f7fe fb36 	bl	800225c <xQueueGenericSendFromISR>
 8003bf0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3728      	adds	r7, #40	; 0x28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000c18 	.word	0x20000c18

08003c00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <prvProcessExpiredTimer+0x7c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe f88f 	bl	8001d3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d121      	bne.n	8003c6a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	18d1      	adds	r1, r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	6978      	ldr	r0, [r7, #20]
 8003c34:	f000 f8c8 	bl	8003dc8 <prvInsertTimerInActiveList>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d015      	beq.n	8003c6a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	2300      	movs	r3, #0
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	2100      	movs	r1, #0
 8003c48:	6978      	ldr	r0, [r7, #20]
 8003c4a:	f7ff ff8d 	bl	8003b68 <xTimerGenericCommand>
 8003c4e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <prvProcessExpiredTimer+0x6a>
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e7fe      	b.n	8003c68 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	6978      	ldr	r0, [r7, #20]
 8003c70:	4798      	blx	r3
}
 8003c72:	bf00      	nop
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000c10 	.word	0x20000c10

08003c80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c88:	f107 0308 	add.w	r3, r7, #8
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 f857 	bl	8003d40 <prvGetNextExpireTime>
 8003c92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4619      	mov	r1, r3
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f803 	bl	8003ca4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003c9e:	f000 f8d5 	bl	8003e4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ca2:	e7f1      	b.n	8003c88 <prvTimerTask+0x8>

08003ca4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003cae:	f7ff f955 	bl	8002f5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cb2:	f107 0308 	add.w	r3, r7, #8
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f866 	bl	8003d88 <prvSampleTimeNow>
 8003cbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d130      	bne.n	8003d26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <prvProcessTimerOrBlockTask+0x3c>
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d806      	bhi.n	8003ce0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003cd2:	f7ff f951 	bl	8002f78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff91 	bl	8003c00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003cde:	e024      	b.n	8003d2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ce6:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <prvProcessTimerOrBlockTask+0x90>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <prvProcessTimerOrBlockTask+0x94>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4619      	mov	r1, r3
 8003d06:	f7fe fe71 	bl	80029ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d0a:	f7ff f935 	bl	8002f78 <xTaskResumeAll>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d14:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <prvProcessTimerOrBlockTask+0x98>)
 8003d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	f3bf 8f6f 	isb	sy
}
 8003d24:	e001      	b.n	8003d2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d26:	f7ff f927 	bl	8002f78 <xTaskResumeAll>
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000c14 	.word	0x20000c14
 8003d38:	20000c18 	.word	0x20000c18
 8003d3c:	e000ed04 	.word	0xe000ed04

08003d40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d48:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <prvGetNextExpireTime+0x44>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bf0c      	ite	eq
 8003d52:	2301      	moveq	r3, #1
 8003d54:	2300      	movne	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d105      	bne.n	8003d72 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d66:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <prvGetNextExpireTime+0x44>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e001      	b.n	8003d76 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d76:	68fb      	ldr	r3, [r7, #12]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000c10 	.word	0x20000c10

08003d88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d90:	f7ff f98e 	bl	80030b0 <xTaskGetTickCount>
 8003d94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d96:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <prvSampleTimeNow+0x3c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d205      	bcs.n	8003dac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003da0:	f000 f904 	bl	8003fac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e002      	b.n	8003db2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003db2:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <prvSampleTimeNow+0x3c>)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003db8:	68fb      	ldr	r3, [r7, #12]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000c20 	.word	0x20000c20

08003dc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d812      	bhi.n	8003e14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	1ad2      	subs	r2, r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d302      	bcc.n	8003e02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e01b      	b.n	8003e3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <prvInsertTimerInActiveList+0x7c>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	f7fd ff5d 	bl	8001ccc <vListInsert>
 8003e12:	e012      	b.n	8003e3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d206      	bcs.n	8003e2a <prvInsertTimerInActiveList+0x62>
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d302      	bcc.n	8003e2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e007      	b.n	8003e3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <prvInsertTimerInActiveList+0x80>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3304      	adds	r3, #4
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f7fd ff49 	bl	8001ccc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e3a:	697b      	ldr	r3, [r7, #20]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000c14 	.word	0x20000c14
 8003e48:	20000c10 	.word	0x20000c10

08003e4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08e      	sub	sp, #56	; 0x38
 8003e50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e52:	e099      	b.n	8003f88 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	da17      	bge.n	8003e8a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e5a:	1d3b      	adds	r3, r7, #4
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <prvProcessReceivedCommands+0x2e>
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	61fb      	str	r3, [r7, #28]
 8003e78:	e7fe      	b.n	8003e78 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e80:	6850      	ldr	r0, [r2, #4]
 8003e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	4611      	mov	r1, r2
 8003e88:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	db7a      	blt.n	8003f86 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fd ff4b 	bl	8001d3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff6d 	bl	8003d88 <prvSampleTimeNow>
 8003eae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	d868      	bhi.n	8003f88 <prvProcessReceivedCommands+0x13c>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <prvProcessReceivedCommands+0x70>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ee5 	.word	0x08003ee5
 8003ec0:	08003ee5 	.word	0x08003ee5
 8003ec4:	08003ee5 	.word	0x08003ee5
 8003ec8:	08003f89 	.word	0x08003f89
 8003ecc:	08003f3f 	.word	0x08003f3f
 8003ed0:	08003f75 	.word	0x08003f75
 8003ed4:	08003ee5 	.word	0x08003ee5
 8003ed8:	08003ee5 	.word	0x08003ee5
 8003edc:	08003f89 	.word	0x08003f89
 8003ee0:	08003f3f 	.word	0x08003f3f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	18d1      	adds	r1, r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef2:	f7ff ff69 	bl	8003dc8 <prvInsertTimerInActiveList>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d045      	beq.n	8003f88 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f02:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d13d      	bne.n	8003f88 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	441a      	add	r2, r3
 8003f14:	2300      	movs	r3, #0
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f1e:	f7ff fe23 	bl	8003b68 <xTimerGenericCommand>
 8003f22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d12e      	bne.n	8003f88 <prvProcessReceivedCommands+0x13c>
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e7fe      	b.n	8003f3c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <prvProcessReceivedCommands+0x114>
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	e7fe      	b.n	8003f5e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	699a      	ldr	r2, [r3, #24]
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	18d1      	adds	r1, r2, r3
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f6e:	f7ff ff2b 	bl	8003dc8 <prvInsertTimerInActiveList>
					break;
 8003f72:	e009      	b.n	8003f88 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d104      	bne.n	8003f88 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8003f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f80:	f000 fb5a 	bl	8004638 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003f84:	e000      	b.n	8003f88 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003f86:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <prvProcessReceivedCommands+0x15c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	1d39      	adds	r1, r7, #4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe f9f7 	bl	8002384 <xQueueReceive>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f47f af5b 	bne.w	8003e54 <prvProcessReceivedCommands+0x8>
	}
}
 8003f9e:	bf00      	nop
 8003fa0:	3730      	adds	r7, #48	; 0x30
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000c18 	.word	0x20000c18

08003fac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fb2:	e044      	b.n	800403e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fb4:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <prvSwitchTimerLists+0xb8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fbe:	4b29      	ldr	r3, [pc, #164]	; (8004064 <prvSwitchTimerLists+0xb8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fd feb5 	bl	8001d3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d12d      	bne.n	800403e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4413      	add	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d90e      	bls.n	8004012 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004000:	4b18      	ldr	r3, [pc, #96]	; (8004064 <prvSwitchTimerLists+0xb8>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f7fd fe5e 	bl	8001ccc <vListInsert>
 8004010:	e015      	b.n	800403e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004012:	2300      	movs	r3, #0
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2300      	movs	r3, #0
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	2100      	movs	r1, #0
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f7ff fda3 	bl	8003b68 <xTimerGenericCommand>
 8004022:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <prvSwitchTimerLists+0x92>
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	e7fe      	b.n	800403c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <prvSwitchTimerLists+0xb8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1b5      	bne.n	8003fb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <prvSwitchTimerLists+0xb8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <prvSwitchTimerLists+0xbc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a04      	ldr	r2, [pc, #16]	; (8004064 <prvSwitchTimerLists+0xb8>)
 8004054:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004056:	4a04      	ldr	r2, [pc, #16]	; (8004068 <prvSwitchTimerLists+0xbc>)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	6013      	str	r3, [r2, #0]
}
 800405c:	bf00      	nop
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000c10 	.word	0x20000c10
 8004068:	20000c14 	.word	0x20000c14

0800406c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004072:	f000 f929 	bl	80042c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004076:	4b15      	ldr	r3, [pc, #84]	; (80040cc <prvCheckForValidListAndQueue+0x60>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d120      	bne.n	80040c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800407e:	4814      	ldr	r0, [pc, #80]	; (80040d0 <prvCheckForValidListAndQueue+0x64>)
 8004080:	f7fd fdd6 	bl	8001c30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004084:	4813      	ldr	r0, [pc, #76]	; (80040d4 <prvCheckForValidListAndQueue+0x68>)
 8004086:	f7fd fdd3 	bl	8001c30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800408a:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <prvCheckForValidListAndQueue+0x6c>)
 800408c:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <prvCheckForValidListAndQueue+0x64>)
 800408e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <prvCheckForValidListAndQueue+0x70>)
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <prvCheckForValidListAndQueue+0x68>)
 8004094:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004096:	2300      	movs	r3, #0
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <prvCheckForValidListAndQueue+0x74>)
 800409c:	4a11      	ldr	r2, [pc, #68]	; (80040e4 <prvCheckForValidListAndQueue+0x78>)
 800409e:	2110      	movs	r1, #16
 80040a0:	200a      	movs	r0, #10
 80040a2:	f7fd fedd 	bl	8001e60 <xQueueGenericCreateStatic>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4b08      	ldr	r3, [pc, #32]	; (80040cc <prvCheckForValidListAndQueue+0x60>)
 80040aa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <prvCheckForValidListAndQueue+0x60>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <prvCheckForValidListAndQueue+0x60>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	490b      	ldr	r1, [pc, #44]	; (80040e8 <prvCheckForValidListAndQueue+0x7c>)
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fc6e 	bl	800299c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040c0:	f000 f930 	bl	8004324 <vPortExitCritical>
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000c18 	.word	0x20000c18
 80040d0:	20000be8 	.word	0x20000be8
 80040d4:	20000bfc 	.word	0x20000bfc
 80040d8:	20000c10 	.word	0x20000c10
 80040dc:	20000c14 	.word	0x20000c14
 80040e0:	20000cc4 	.word	0x20000cc4
 80040e4:	20000c24 	.word	0x20000c24
 80040e8:	08004974 	.word	0x08004974

080040ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3b04      	subs	r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3b04      	subs	r3, #4
 800410a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f023 0201 	bic.w	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3b04      	subs	r3, #4
 800411a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800411c:	4a08      	ldr	r2, [pc, #32]	; (8004140 <pxPortInitialiseStack+0x54>)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3b14      	subs	r3, #20
 8004126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3b20      	subs	r3, #32
 8004132:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004134:	68fb      	ldr	r3, [r7, #12]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	08004145 	.word	0x08004145

08004144 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800414a:	2300      	movs	r3, #0
 800414c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <prvTaskExitError+0x4c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004156:	d009      	beq.n	800416c <prvTaskExitError+0x28>
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e7fe      	b.n	800416a <prvTaskExitError+0x26>
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800417e:	bf00      	nop
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0fc      	beq.n	8004180 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr
 8004190:	2000000c 	.word	0x2000000c
	...

080041a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <pxCurrentTCBConst2>)
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	6808      	ldr	r0, [r1, #0]
 80041a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041aa:	f380 8809 	msr	PSP, r0
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8811 	msr	BASEPRI, r0
 80041ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80041be:	4770      	bx	lr

080041c0 <pxCurrentTCBConst2>:
 80041c0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041c4:	bf00      	nop
 80041c6:	bf00      	nop

080041c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80041c8:	4806      	ldr	r0, [pc, #24]	; (80041e4 <prvPortStartFirstTask+0x1c>)
 80041ca:	6800      	ldr	r0, [r0, #0]
 80041cc:	6800      	ldr	r0, [r0, #0]
 80041ce:	f380 8808 	msr	MSP, r0
 80041d2:	b662      	cpsie	i
 80041d4:	b661      	cpsie	f
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	df00      	svc	0
 80041e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041e2:	bf00      	nop
 80041e4:	e000ed08 	.word	0xe000ed08

080041e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041ee:	4b31      	ldr	r3, [pc, #196]	; (80042b4 <xPortStartScheduler+0xcc>)
 80041f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	22ff      	movs	r2, #255	; 0xff
 80041fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <xPortStartScheduler+0xd0>)
 8004214:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004216:	4b29      	ldr	r3, [pc, #164]	; (80042bc <xPortStartScheduler+0xd4>)
 8004218:	2207      	movs	r2, #7
 800421a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800421c:	e009      	b.n	8004232 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800421e:	4b27      	ldr	r3, [pc, #156]	; (80042bc <xPortStartScheduler+0xd4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3b01      	subs	r3, #1
 8004224:	4a25      	ldr	r2, [pc, #148]	; (80042bc <xPortStartScheduler+0xd4>)
 8004226:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	b2db      	uxtb	r3, r3
 8004230:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423a:	2b80      	cmp	r3, #128	; 0x80
 800423c:	d0ef      	beq.n	800421e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800423e:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <xPortStartScheduler+0xd4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f1c3 0307 	rsb	r3, r3, #7
 8004246:	2b04      	cmp	r3, #4
 8004248:	d009      	beq.n	800425e <xPortStartScheduler+0x76>
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	e7fe      	b.n	800425c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800425e:	4b17      	ldr	r3, [pc, #92]	; (80042bc <xPortStartScheduler+0xd4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	4a15      	ldr	r2, [pc, #84]	; (80042bc <xPortStartScheduler+0xd4>)
 8004266:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <xPortStartScheduler+0xd4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004270:	4a12      	ldr	r2, [pc, #72]	; (80042bc <xPortStartScheduler+0xd4>)
 8004272:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	b2da      	uxtb	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800427c:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <xPortStartScheduler+0xd8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a0f      	ldr	r2, [pc, #60]	; (80042c0 <xPortStartScheduler+0xd8>)
 8004282:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004286:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004288:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <xPortStartScheduler+0xd8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <xPortStartScheduler+0xd8>)
 800428e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004292:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004294:	f000 f8b0 	bl	80043f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <xPortStartScheduler+0xdc>)
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800429e:	f7ff ff93 	bl	80041c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042a2:	f7fe ffd1 	bl	8003248 <vTaskSwitchContext>
	prvTaskExitError();
 80042a6:	f7ff ff4d 	bl	8004144 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	e000e400 	.word	0xe000e400
 80042b8:	20000d14 	.word	0x20000d14
 80042bc:	20000d18 	.word	0x20000d18
 80042c0:	e000ed20 	.word	0xe000ed20
 80042c4:	2000000c 	.word	0x2000000c

080042c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <vPortEnterCritical+0x54>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	4a0d      	ldr	r2, [pc, #52]	; (800431c <vPortEnterCritical+0x54>)
 80042e8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <vPortEnterCritical+0x54>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10e      	bne.n	8004310 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <vPortEnterCritical+0x58>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <vPortEnterCritical+0x48>
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	e7fe      	b.n	800430e <vPortEnterCritical+0x46>
	}
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	2000000c 	.word	0x2000000c
 8004320:	e000ed04 	.word	0xe000ed04

08004324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <vPortExitCritical+0x48>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <vPortExitCritical+0x22>
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	e7fe      	b.n	8004344 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <vPortExitCritical+0x48>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3b01      	subs	r3, #1
 800434c:	4a07      	ldr	r2, [pc, #28]	; (800436c <vPortExitCritical+0x48>)
 800434e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <vPortExitCritical+0x48>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d104      	bne.n	8004362 <vPortExitCritical+0x3e>
 8004358:	2300      	movs	r3, #0
 800435a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	2000000c 	.word	0x2000000c

08004370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004370:	f3ef 8009 	mrs	r0, PSP
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <pxCurrentTCBConst>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004380:	6010      	str	r0, [r2, #0]
 8004382:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004386:	f04f 0050 	mov.w	r0, #80	; 0x50
 800438a:	f380 8811 	msr	BASEPRI, r0
 800438e:	f7fe ff5b 	bl	8003248 <vTaskSwitchContext>
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f380 8811 	msr	BASEPRI, r0
 800439a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	6808      	ldr	r0, [r1, #0]
 80043a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043a6:	f380 8809 	msr	PSP, r0
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	4770      	bx	lr

080043b0 <pxCurrentTCBConst>:
 80043b0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop

080043b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043d0:	f7fe fe7c 	bl	80030cc <xTaskIncrementTick>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <SysTick_Handler+0x3c>)
 80043dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	2300      	movs	r3, #0
 80043e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	e000ed04 	.word	0xe000ed04

080043f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <vPortSetupTimerInterrupt+0x30>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <vPortSetupTimerInterrupt+0x34>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004408:	4b09      	ldr	r3, [pc, #36]	; (8004430 <vPortSetupTimerInterrupt+0x38>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a09      	ldr	r2, [pc, #36]	; (8004434 <vPortSetupTimerInterrupt+0x3c>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	4a08      	ldr	r2, [pc, #32]	; (8004438 <vPortSetupTimerInterrupt+0x40>)
 8004416:	3b01      	subs	r3, #1
 8004418:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800441a:	4b03      	ldr	r3, [pc, #12]	; (8004428 <vPortSetupTimerInterrupt+0x30>)
 800441c:	2207      	movs	r2, #7
 800441e:	601a      	str	r2, [r3, #0]
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	e000e010 	.word	0xe000e010
 800442c:	e000e018 	.word	0xe000e018
 8004430:	20000000 	.word	0x20000000
 8004434:	10624dd3 	.word	0x10624dd3
 8004438:	e000e014 	.word	0xe000e014

0800443c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004442:	f3ef 8305 	mrs	r3, IPSR
 8004446:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b0f      	cmp	r3, #15
 800444c:	d913      	bls.n	8004476 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800444e:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <vPortValidateInterruptPriority+0x68>)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4413      	add	r3, r2
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004458:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <vPortValidateInterruptPriority+0x6c>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	7afa      	ldrb	r2, [r7, #11]
 800445e:	429a      	cmp	r2, r3
 8004460:	d209      	bcs.n	8004476 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	e7fe      	b.n	8004474 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004476:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <vPortValidateInterruptPriority+0x70>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <vPortValidateInterruptPriority+0x74>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d909      	bls.n	800449a <vPortValidateInterruptPriority+0x5e>
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	e7fe      	b.n	8004498 <vPortValidateInterruptPriority+0x5c>
	}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr
 80044a4:	e000e3f0 	.word	0xe000e3f0
 80044a8:	20000d14 	.word	0x20000d14
 80044ac:	e000ed0c 	.word	0xe000ed0c
 80044b0:	20000d18 	.word	0x20000d18

080044b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	; 0x28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044c0:	f7fe fd4c 	bl	8002f5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044c4:	4b57      	ldr	r3, [pc, #348]	; (8004624 <pvPortMalloc+0x170>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044cc:	f000 f90c 	bl	80046e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044d0:	4b55      	ldr	r3, [pc, #340]	; (8004628 <pvPortMalloc+0x174>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f040 808c 	bne.w	80045f6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01c      	beq.n	800451e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80044e4:	2208      	movs	r2, #8
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d013      	beq.n	800451e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f023 0307 	bic.w	r3, r3, #7
 80044fc:	3308      	adds	r3, #8
 80044fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <pvPortMalloc+0x6a>
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	e7fe      	b.n	800451c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d068      	beq.n	80045f6 <pvPortMalloc+0x142>
 8004524:	4b41      	ldr	r3, [pc, #260]	; (800462c <pvPortMalloc+0x178>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d863      	bhi.n	80045f6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800452e:	4b40      	ldr	r3, [pc, #256]	; (8004630 <pvPortMalloc+0x17c>)
 8004530:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004532:	4b3f      	ldr	r3, [pc, #252]	; (8004630 <pvPortMalloc+0x17c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004538:	e004      	b.n	8004544 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d903      	bls.n	8004556 <pvPortMalloc+0xa2>
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f1      	bne.n	800453a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004556:	4b33      	ldr	r3, [pc, #204]	; (8004624 <pvPortMalloc+0x170>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455c:	429a      	cmp	r2, r3
 800455e:	d04a      	beq.n	80045f6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2208      	movs	r2, #8
 8004566:	4413      	add	r3, r2
 8004568:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	1ad2      	subs	r2, r2, r3
 800457a:	2308      	movs	r3, #8
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	429a      	cmp	r2, r3
 8004580:	d91e      	bls.n	80045c0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4413      	add	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <pvPortMalloc+0xf4>
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	e7fe      	b.n	80045a6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1ad2      	subs	r2, r2, r3
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045ba:	69b8      	ldr	r0, [r7, #24]
 80045bc:	f000 f8f6 	bl	80047ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045c0:	4b1a      	ldr	r3, [pc, #104]	; (800462c <pvPortMalloc+0x178>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <pvPortMalloc+0x178>)
 80045cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045ce:	4b17      	ldr	r3, [pc, #92]	; (800462c <pvPortMalloc+0x178>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b18      	ldr	r3, [pc, #96]	; (8004634 <pvPortMalloc+0x180>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d203      	bcs.n	80045e2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <pvPortMalloc+0x178>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a15      	ldr	r2, [pc, #84]	; (8004634 <pvPortMalloc+0x180>)
 80045e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <pvPortMalloc+0x174>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045f6:	f7fe fcbf 	bl	8002f78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	2b00      	cmp	r3, #0
 8004602:	d009      	beq.n	8004618 <pvPortMalloc+0x164>
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e7fe      	b.n	8004616 <pvPortMalloc+0x162>
	return pvReturn;
 8004618:	69fb      	ldr	r3, [r7, #28]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3728      	adds	r7, #40	; 0x28
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20001924 	.word	0x20001924
 8004628:	20001930 	.word	0x20001930
 800462c:	20001928 	.word	0x20001928
 8004630:	2000191c 	.word	0x2000191c
 8004634:	2000192c 	.word	0x2000192c

08004638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d046      	beq.n	80046d8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800464a:	2308      	movs	r3, #8
 800464c:	425b      	negs	r3, r3
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4413      	add	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <vPortFree+0xa8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <vPortFree+0x42>
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	e7fe      	b.n	8004678 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <vPortFree+0x5e>
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	e7fe      	b.n	8004694 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <vPortFree+0xa8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4013      	ands	r3, r2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d019      	beq.n	80046d8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d115      	bne.n	80046d8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <vPortFree+0xa8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	401a      	ands	r2, r3
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046bc:	f7fe fc4e 	bl	8002f5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <vPortFree+0xac>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	4a06      	ldr	r2, [pc, #24]	; (80046e4 <vPortFree+0xac>)
 80046cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046ce:	6938      	ldr	r0, [r7, #16]
 80046d0:	f000 f86c 	bl	80047ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80046d4:	f7fe fc50 	bl	8002f78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046d8:	bf00      	nop
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20001930 	.word	0x20001930
 80046e4:	20001928 	.word	0x20001928

080046e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80046f4:	4b27      	ldr	r3, [pc, #156]	; (8004794 <prvHeapInit+0xac>)
 80046f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00c      	beq.n	800471c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3307      	adds	r3, #7
 8004706:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0307 	bic.w	r3, r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	4a1f      	ldr	r2, [pc, #124]	; (8004794 <prvHeapInit+0xac>)
 8004718:	4413      	add	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004720:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <prvHeapInit+0xb0>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004726:	4b1c      	ldr	r3, [pc, #112]	; (8004798 <prvHeapInit+0xb0>)
 8004728:	2200      	movs	r2, #0
 800472a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	4413      	add	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004734:	2208      	movs	r2, #8
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0307 	bic.w	r3, r3, #7
 8004742:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a15      	ldr	r2, [pc, #84]	; (800479c <prvHeapInit+0xb4>)
 8004748:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800474a:	4b14      	ldr	r3, [pc, #80]	; (800479c <prvHeapInit+0xb4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2200      	movs	r2, #0
 8004750:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <prvHeapInit+0xb4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	1ad2      	subs	r2, r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <prvHeapInit+0xb4>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4a0a      	ldr	r2, [pc, #40]	; (80047a0 <prvHeapInit+0xb8>)
 8004776:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <prvHeapInit+0xbc>)
 800477e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004780:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <prvHeapInit+0xc0>)
 8004782:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004786:	601a      	str	r2, [r3, #0]
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000d1c 	.word	0x20000d1c
 8004798:	2000191c 	.word	0x2000191c
 800479c:	20001924 	.word	0x20001924
 80047a0:	2000192c 	.word	0x2000192c
 80047a4:	20001928 	.word	0x20001928
 80047a8:	20001930 	.word	0x20001930

080047ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047b4:	4b27      	ldr	r3, [pc, #156]	; (8004854 <prvInsertBlockIntoFreeList+0xa8>)
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e002      	b.n	80047c0 <prvInsertBlockIntoFreeList+0x14>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d8f7      	bhi.n	80047ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	4413      	add	r3, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d108      	bne.n	80047ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	441a      	add	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	441a      	add	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d118      	bne.n	8004834 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	4b14      	ldr	r3, [pc, #80]	; (8004858 <prvInsertBlockIntoFreeList+0xac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d00d      	beq.n	800482a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	441a      	add	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e008      	b.n	800483c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800482a:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <prvInsertBlockIntoFreeList+0xac>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e003      	b.n	800483c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d002      	beq.n	800484a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr
 8004854:	2000191c 	.word	0x2000191c
 8004858:	20001924 	.word	0x20001924

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	2500      	movs	r5, #0
 8004860:	4e0c      	ldr	r6, [pc, #48]	; (8004894 <__libc_init_array+0x38>)
 8004862:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004864:	1ba4      	subs	r4, r4, r6
 8004866:	10a4      	asrs	r4, r4, #2
 8004868:	42a5      	cmp	r5, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	f000 f82e 	bl	80048cc <_init>
 8004870:	2500      	movs	r5, #0
 8004872:	4e0a      	ldr	r6, [pc, #40]	; (800489c <__libc_init_array+0x40>)
 8004874:	4c0a      	ldr	r4, [pc, #40]	; (80048a0 <__libc_init_array+0x44>)
 8004876:	1ba4      	subs	r4, r4, r6
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	42a5      	cmp	r5, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004884:	4798      	blx	r3
 8004886:	3501      	adds	r5, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800488e:	4798      	blx	r3
 8004890:	3501      	adds	r5, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	08004994 	.word	0x08004994
 8004898:	08004994 	.word	0x08004994
 800489c:	08004994 	.word	0x08004994
 80048a0:	08004998 	.word	0x08004998

080048a4 <memcpy>:
 80048a4:	b510      	push	{r4, lr}
 80048a6:	1e43      	subs	r3, r0, #1
 80048a8:	440a      	add	r2, r1
 80048aa:	4291      	cmp	r1, r2
 80048ac:	d100      	bne.n	80048b0 <memcpy+0xc>
 80048ae:	bd10      	pop	{r4, pc}
 80048b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048b8:	e7f7      	b.n	80048aa <memcpy+0x6>

080048ba <memset>:
 80048ba:	4603      	mov	r3, r0
 80048bc:	4402      	add	r2, r0
 80048be:	4293      	cmp	r3, r2
 80048c0:	d100      	bne.n	80048c4 <memset+0xa>
 80048c2:	4770      	bx	lr
 80048c4:	f803 1b01 	strb.w	r1, [r3], #1
 80048c8:	e7f9      	b.n	80048be <memset+0x4>
	...

080048cc <_init>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	bf00      	nop
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr

080048d8 <_fini>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr
